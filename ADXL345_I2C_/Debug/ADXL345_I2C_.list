
ADXL345_I2C_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045cc  080045cc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045d4  080045d4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d4  080045d4  000145d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080045dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000002e4  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a44b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001860  00000000  00000000  0002a51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000920  00000000  00000000  0002bd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000072f  00000000  00000000  0002c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002076b  00000000  00000000  0002cdcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c4d0  00000000  00000000  0004d53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c49f2  00000000  00000000  00059a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b88  00000000  00000000  0011e3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00120f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800453c 	.word	0x0800453c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800453c 	.word	0x0800453c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b970 	b.w	8000bd4 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9e08      	ldr	r6, [sp, #32]
 8000912:	460d      	mov	r5, r1
 8000914:	4604      	mov	r4, r0
 8000916:	460f      	mov	r7, r1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d14a      	bne.n	80009b2 <__udivmoddi4+0xa6>
 800091c:	428a      	cmp	r2, r1
 800091e:	4694      	mov	ip, r2
 8000920:	d965      	bls.n	80009ee <__udivmoddi4+0xe2>
 8000922:	fab2 f382 	clz	r3, r2
 8000926:	b143      	cbz	r3, 800093a <__udivmoddi4+0x2e>
 8000928:	fa02 fc03 	lsl.w	ip, r2, r3
 800092c:	f1c3 0220 	rsb	r2, r3, #32
 8000930:	409f      	lsls	r7, r3
 8000932:	fa20 f202 	lsr.w	r2, r0, r2
 8000936:	4317      	orrs	r7, r2
 8000938:	409c      	lsls	r4, r3
 800093a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800093e:	fa1f f58c 	uxth.w	r5, ip
 8000942:	fbb7 f1fe 	udiv	r1, r7, lr
 8000946:	0c22      	lsrs	r2, r4, #16
 8000948:	fb0e 7711 	mls	r7, lr, r1, r7
 800094c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000950:	fb01 f005 	mul.w	r0, r1, r5
 8000954:	4290      	cmp	r0, r2
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x62>
 8000958:	eb1c 0202 	adds.w	r2, ip, r2
 800095c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000960:	f080 811c 	bcs.w	8000b9c <__udivmoddi4+0x290>
 8000964:	4290      	cmp	r0, r2
 8000966:	f240 8119 	bls.w	8000b9c <__udivmoddi4+0x290>
 800096a:	3902      	subs	r1, #2
 800096c:	4462      	add	r2, ip
 800096e:	1a12      	subs	r2, r2, r0
 8000970:	b2a4      	uxth	r4, r4
 8000972:	fbb2 f0fe 	udiv	r0, r2, lr
 8000976:	fb0e 2210 	mls	r2, lr, r0, r2
 800097a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800097e:	fb00 f505 	mul.w	r5, r0, r5
 8000982:	42a5      	cmp	r5, r4
 8000984:	d90a      	bls.n	800099c <__udivmoddi4+0x90>
 8000986:	eb1c 0404 	adds.w	r4, ip, r4
 800098a:	f100 32ff 	add.w	r2, r0, #4294967295
 800098e:	f080 8107 	bcs.w	8000ba0 <__udivmoddi4+0x294>
 8000992:	42a5      	cmp	r5, r4
 8000994:	f240 8104 	bls.w	8000ba0 <__udivmoddi4+0x294>
 8000998:	4464      	add	r4, ip
 800099a:	3802      	subs	r0, #2
 800099c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009a0:	1b64      	subs	r4, r4, r5
 80009a2:	2100      	movs	r1, #0
 80009a4:	b11e      	cbz	r6, 80009ae <__udivmoddi4+0xa2>
 80009a6:	40dc      	lsrs	r4, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	e9c6 4300 	strd	r4, r3, [r6]
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0xbc>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	f000 80ed 	beq.w	8000b96 <__udivmoddi4+0x28a>
 80009bc:	2100      	movs	r1, #0
 80009be:	e9c6 0500 	strd	r0, r5, [r6]
 80009c2:	4608      	mov	r0, r1
 80009c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c8:	fab3 f183 	clz	r1, r3
 80009cc:	2900      	cmp	r1, #0
 80009ce:	d149      	bne.n	8000a64 <__udivmoddi4+0x158>
 80009d0:	42ab      	cmp	r3, r5
 80009d2:	d302      	bcc.n	80009da <__udivmoddi4+0xce>
 80009d4:	4282      	cmp	r2, r0
 80009d6:	f200 80f8 	bhi.w	8000bca <__udivmoddi4+0x2be>
 80009da:	1a84      	subs	r4, r0, r2
 80009dc:	eb65 0203 	sbc.w	r2, r5, r3
 80009e0:	2001      	movs	r0, #1
 80009e2:	4617      	mov	r7, r2
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d0e2      	beq.n	80009ae <__udivmoddi4+0xa2>
 80009e8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ec:	e7df      	b.n	80009ae <__udivmoddi4+0xa2>
 80009ee:	b902      	cbnz	r2, 80009f2 <__udivmoddi4+0xe6>
 80009f0:	deff      	udf	#255	; 0xff
 80009f2:	fab2 f382 	clz	r3, r2
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f040 8090 	bne.w	8000b1c <__udivmoddi4+0x210>
 80009fc:	1a8a      	subs	r2, r1, r2
 80009fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a02:	fa1f fe8c 	uxth.w	lr, ip
 8000a06:	2101      	movs	r1, #1
 8000a08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a10:	0c22      	lsrs	r2, r4, #16
 8000a12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a16:	fb0e f005 	mul.w	r0, lr, r5
 8000a1a:	4290      	cmp	r0, r2
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x124>
 8000a1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a26:	d202      	bcs.n	8000a2e <__udivmoddi4+0x122>
 8000a28:	4290      	cmp	r0, r2
 8000a2a:	f200 80cb 	bhi.w	8000bc4 <__udivmoddi4+0x2b8>
 8000a2e:	4645      	mov	r5, r8
 8000a30:	1a12      	subs	r2, r2, r0
 8000a32:	b2a4      	uxth	r4, r4
 8000a34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a38:	fb07 2210 	mls	r2, r7, r0, r2
 8000a3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a40:	fb0e fe00 	mul.w	lr, lr, r0
 8000a44:	45a6      	cmp	lr, r4
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x14e>
 8000a48:	eb1c 0404 	adds.w	r4, ip, r4
 8000a4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a50:	d202      	bcs.n	8000a58 <__udivmoddi4+0x14c>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f200 80bb 	bhi.w	8000bce <__udivmoddi4+0x2c2>
 8000a58:	4610      	mov	r0, r2
 8000a5a:	eba4 040e 	sub.w	r4, r4, lr
 8000a5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a62:	e79f      	b.n	80009a4 <__udivmoddi4+0x98>
 8000a64:	f1c1 0720 	rsb	r7, r1, #32
 8000a68:	408b      	lsls	r3, r1
 8000a6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a72:	fa05 f401 	lsl.w	r4, r5, r1
 8000a76:	fa20 f307 	lsr.w	r3, r0, r7
 8000a7a:	40fd      	lsrs	r5, r7
 8000a7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a80:	4323      	orrs	r3, r4
 8000a82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a86:	fa1f fe8c 	uxth.w	lr, ip
 8000a8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a8e:	0c1c      	lsrs	r4, r3, #16
 8000a90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a94:	fb08 f50e 	mul.w	r5, r8, lr
 8000a98:	42a5      	cmp	r5, r4
 8000a9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000aa2:	d90b      	bls.n	8000abc <__udivmoddi4+0x1b0>
 8000aa4:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aac:	f080 8088 	bcs.w	8000bc0 <__udivmoddi4+0x2b4>
 8000ab0:	42a5      	cmp	r5, r4
 8000ab2:	f240 8085 	bls.w	8000bc0 <__udivmoddi4+0x2b4>
 8000ab6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aba:	4464      	add	r4, ip
 8000abc:	1b64      	subs	r4, r4, r5
 8000abe:	b29d      	uxth	r5, r3
 8000ac0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ac4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ac8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000acc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ad0:	45a6      	cmp	lr, r4
 8000ad2:	d908      	bls.n	8000ae6 <__udivmoddi4+0x1da>
 8000ad4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000adc:	d26c      	bcs.n	8000bb8 <__udivmoddi4+0x2ac>
 8000ade:	45a6      	cmp	lr, r4
 8000ae0:	d96a      	bls.n	8000bb8 <__udivmoddi4+0x2ac>
 8000ae2:	3b02      	subs	r3, #2
 8000ae4:	4464      	add	r4, ip
 8000ae6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aea:	fba3 9502 	umull	r9, r5, r3, r2
 8000aee:	eba4 040e 	sub.w	r4, r4, lr
 8000af2:	42ac      	cmp	r4, r5
 8000af4:	46c8      	mov	r8, r9
 8000af6:	46ae      	mov	lr, r5
 8000af8:	d356      	bcc.n	8000ba8 <__udivmoddi4+0x29c>
 8000afa:	d053      	beq.n	8000ba4 <__udivmoddi4+0x298>
 8000afc:	b156      	cbz	r6, 8000b14 <__udivmoddi4+0x208>
 8000afe:	ebb0 0208 	subs.w	r2, r0, r8
 8000b02:	eb64 040e 	sbc.w	r4, r4, lr
 8000b06:	fa04 f707 	lsl.w	r7, r4, r7
 8000b0a:	40ca      	lsrs	r2, r1
 8000b0c:	40cc      	lsrs	r4, r1
 8000b0e:	4317      	orrs	r7, r2
 8000b10:	e9c6 7400 	strd	r7, r4, [r6]
 8000b14:	4618      	mov	r0, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1c:	f1c3 0120 	rsb	r1, r3, #32
 8000b20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b24:	fa20 f201 	lsr.w	r2, r0, r1
 8000b28:	fa25 f101 	lsr.w	r1, r5, r1
 8000b2c:	409d      	lsls	r5, r3
 8000b2e:	432a      	orrs	r2, r5
 8000b30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b34:	fa1f fe8c 	uxth.w	lr, ip
 8000b38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b40:	0c11      	lsrs	r1, r2, #16
 8000b42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b46:	fb00 f50e 	mul.w	r5, r0, lr
 8000b4a:	428d      	cmp	r5, r1
 8000b4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b50:	d908      	bls.n	8000b64 <__udivmoddi4+0x258>
 8000b52:	eb1c 0101 	adds.w	r1, ip, r1
 8000b56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b5a:	d22f      	bcs.n	8000bbc <__udivmoddi4+0x2b0>
 8000b5c:	428d      	cmp	r5, r1
 8000b5e:	d92d      	bls.n	8000bbc <__udivmoddi4+0x2b0>
 8000b60:	3802      	subs	r0, #2
 8000b62:	4461      	add	r1, ip
 8000b64:	1b49      	subs	r1, r1, r5
 8000b66:	b292      	uxth	r2, r2
 8000b68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b74:	fb05 f10e 	mul.w	r1, r5, lr
 8000b78:	4291      	cmp	r1, r2
 8000b7a:	d908      	bls.n	8000b8e <__udivmoddi4+0x282>
 8000b7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b84:	d216      	bcs.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b86:	4291      	cmp	r1, r2
 8000b88:	d914      	bls.n	8000bb4 <__udivmoddi4+0x2a8>
 8000b8a:	3d02      	subs	r5, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a52      	subs	r2, r2, r1
 8000b90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b94:	e738      	b.n	8000a08 <__udivmoddi4+0xfc>
 8000b96:	4631      	mov	r1, r6
 8000b98:	4630      	mov	r0, r6
 8000b9a:	e708      	b.n	80009ae <__udivmoddi4+0xa2>
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	e6e6      	b.n	800096e <__udivmoddi4+0x62>
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	e6fb      	b.n	800099c <__udivmoddi4+0x90>
 8000ba4:	4548      	cmp	r0, r9
 8000ba6:	d2a9      	bcs.n	8000afc <__udivmoddi4+0x1f0>
 8000ba8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	e7a3      	b.n	8000afc <__udivmoddi4+0x1f0>
 8000bb4:	4645      	mov	r5, r8
 8000bb6:	e7ea      	b.n	8000b8e <__udivmoddi4+0x282>
 8000bb8:	462b      	mov	r3, r5
 8000bba:	e794      	b.n	8000ae6 <__udivmoddi4+0x1da>
 8000bbc:	4640      	mov	r0, r8
 8000bbe:	e7d1      	b.n	8000b64 <__udivmoddi4+0x258>
 8000bc0:	46d0      	mov	r8, sl
 8000bc2:	e77b      	b.n	8000abc <__udivmoddi4+0x1b0>
 8000bc4:	3d02      	subs	r5, #2
 8000bc6:	4462      	add	r2, ip
 8000bc8:	e732      	b.n	8000a30 <__udivmoddi4+0x124>
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e70a      	b.n	80009e4 <__udivmoddi4+0xd8>
 8000bce:	4464      	add	r4, ip
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	e742      	b.n	8000a5a <__udivmoddi4+0x14e>

08000bd4 <__aeabi_idiv0>:
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <SCAN_I2C_Address>:
uint8_t myDatas[6];
int16_t x,y,z;
float xG,yG,zG;

void SCAN_I2C_Address(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	for(int i=0;i<=255;i++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	e00c      	b.n	8000bfe <SCAN_I2C_Address+0x26>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 10)== HAL_OK)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	b299      	uxth	r1, r3
 8000be8:	230a      	movs	r3, #10
 8000bea:	2201      	movs	r2, #1
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <SCAN_I2C_Address+0x38>)
 8000bee:	f001 fb31 	bl	8002254 <HAL_I2C_IsDeviceReady>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <SCAN_I2C_Address+0x2e>
	for(int i=0;i<=255;i++)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2bff      	cmp	r3, #255	; 0xff
 8000c02:	ddef      	ble.n	8000be4 <SCAN_I2C_Address+0xc>
		{
			break;
		}
	}
}
 8000c04:	e000      	b.n	8000c08 <SCAN_I2C_Address+0x30>
			break;
 8000c06:	bf00      	nop
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000090 	.word	0x20000090

08000c14 <ADXL345_Read>:

void ADXL345_Read(uint8_t rRegister, uint8_t numberOfByte)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af04      	add	r7, sp, #16
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, rRegister, 1, myDatas, numberOfByte, 100);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	2164      	movs	r1, #100	; 0x64
 8000c2e:	9102      	str	r1, [sp, #8]
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <ADXL345_Read+0x34>)
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2301      	movs	r3, #1
 8000c38:	21a6      	movs	r1, #166	; 0xa6
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <ADXL345_Read+0x38>)
 8000c3c:	f001 f8e4 	bl	8001e08 <HAL_I2C_Mem_Read>
    if (i2cStatus != HAL_OK) {
        I2C okuma işlemi hatalı ise D15 pini üzerinden bir işareti ayarla
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // Varsayılan olarak HIGH (1)
    }
    */
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000078 	.word	0x20000078
 8000c4c:	20000090 	.word	0x20000090

08000c50 <ADXL345_Write>:

void ADXL345_Write(uint8_t wRegister,uint8_t value)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {0};  // Register ve value degerlerini diziye atayıp master_transmit ile bu diziyi gonderelim.
 8000c60:	2300      	movs	r3, #0
 8000c62:	81bb      	strh	r3, [r7, #12]

	data[0]=wRegister;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, data, 2, 100);
 8000c6c:	f107 020c 	add.w	r2, r7, #12
 8000c70:	2364      	movs	r3, #100	; 0x64
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2302      	movs	r3, #2
 8000c76:	21a6      	movs	r1, #166	; 0xa6
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <ADXL345_Write+0x38>)
 8000c7a:	f000 ffc7 	bl	8001c0c <HAL_I2C_Master_Transmit>

}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000090 	.word	0x20000090

08000c8c <ADXL345_Init>:

void ADXL345_Init()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	SCAN_I2C_Address();
 8000c90:	f7ff ffa2 	bl	8000bd8 <SCAN_I2C_Address>

	ADXL345_Read(0x00,1); // Eger okudugumuz data 0xE5 ise okuma basarili (cihaz hazir)
 8000c94:	2101      	movs	r1, #1
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff ffbc 	bl	8000c14 <ADXL345_Read>

	ADXL345_Write(0x2D,0); // Kontrol bitlerinin tamamini sifirla.
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	202d      	movs	r0, #45	; 0x2d
 8000ca0:	f7ff ffd6 	bl	8000c50 <ADXL345_Write>

	ADXL345_Write(0x2D,0x08); // Measure bit 1, wake up bit 0,autosleep 0,sleep 0 and wakup frequency 8hz;
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	202d      	movs	r0, #45	; 0x2d
 8000ca8:	f7ff ffd2 	bl	8000c50 <ADXL345_Write>

	ADXL345_Write(0x31,0x01); // +- 4g range
 8000cac:	2101      	movs	r1, #1
 8000cae:	2031      	movs	r0, #49	; 0x31
 8000cb0:	f7ff ffce 	bl	8000c50 <ADXL345_Write>


}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <ADXL345_Start>:

void ADXL345_Start()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

	 ADXL345_Read(0x32,6);
 8000cbc:	2106      	movs	r1, #6
 8000cbe:	2032      	movs	r0, #50	; 0x32
 8000cc0:	f7ff ffa8 	bl	8000c14 <ADXL345_Read>
	 x = ((myDatas[1] << 8) | myDatas[0]);
 8000cc4:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <ADXL345_Start+0xe0>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <ADXL345_Start+0xe0>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <ADXL345_Start+0xe4>)
 8000cd8:	801a      	strh	r2, [r3, #0]
	 HAL_Delay(10);
 8000cda:	200a      	movs	r0, #10
 8000cdc:	f000 fb92 	bl	8001404 <HAL_Delay>
	 y = ((myDatas[3] << 8) | myDatas[2]);
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <ADXL345_Start+0xe0>)
 8000ce2:	78db      	ldrb	r3, [r3, #3]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <ADXL345_Start+0xe0>)
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <ADXL345_Start+0xe8>)
 8000cf4:	801a      	strh	r2, [r3, #0]
	 HAL_Delay(10);
 8000cf6:	200a      	movs	r0, #10
 8000cf8:	f000 fb84 	bl	8001404 <HAL_Delay>
	 z = ((myDatas[5] << 8) | myDatas[4]);
 8000cfc:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <ADXL345_Start+0xe0>)
 8000cfe:	795b      	ldrb	r3, [r3, #5]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <ADXL345_Start+0xe0>)
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <ADXL345_Start+0xec>)
 8000d10:	801a      	strh	r2, [r3, #0]
	 xG= x*.0087;
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <ADXL345_Start+0xe4>)
 8000d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fd25 	bl	8000768 <__aeabi_i2d>
 8000d1e:	a31c      	add	r3, pc, #112	; (adr r3, 8000d90 <ADXL345_Start+0xd8>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f7ff faa4 	bl	8000270 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff fd84 	bl	800083c <__aeabi_d2f>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <ADXL345_Start+0xf0>)
 8000d38:	6013      	str	r3, [r2, #0]
	 yG= y*.0087;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <ADXL345_Start+0xe8>)
 8000d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fd11 	bl	8000768 <__aeabi_i2d>
 8000d46:	a312      	add	r3, pc, #72	; (adr r3, 8000d90 <ADXL345_Start+0xd8>)
 8000d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4c:	f7ff fa90 	bl	8000270 <__aeabi_dmul>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	f7ff fd70 	bl	800083c <__aeabi_d2f>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <ADXL345_Start+0xf4>)
 8000d60:	6013      	str	r3, [r2, #0]
	 zG= z*.0087;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <ADXL345_Start+0xec>)
 8000d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fcfd 	bl	8000768 <__aeabi_i2d>
 8000d6e:	a308      	add	r3, pc, #32	; (adr r3, 8000d90 <ADXL345_Start+0xd8>)
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	f7ff fa7c 	bl	8000270 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f7ff fd5c 	bl	800083c <__aeabi_d2f>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <ADXL345_Start+0xf8>)
 8000d88:	6013      	str	r3, [r2, #0]





}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	3bcd35a8 	.word	0x3bcd35a8
 8000d94:	3f81d14e 	.word	0x3f81d14e
 8000d98:	20000078 	.word	0x20000078
 8000d9c:	2000007e 	.word	0x2000007e
 8000da0:	20000080 	.word	0x20000080
 8000da4:	20000082 	.word	0x20000082
 8000da8:	20000084 	.word	0x20000084
 8000dac:	20000088 	.word	0x20000088
 8000db0:	2000008c 	.word	0x2000008c

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 fab1 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f833 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 f8f3 	bl	8000fac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dc6:	f000 f899 	bl	8000efc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000dca:	f000 f8c5 	bl	8000f58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ADXL345_Init();
 8000dce:	f7ff ff5d 	bl	8000c8c <ADXL345_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADXL345_Start();
 8000dd2:	f7ff ff71 	bl	8000cb8 <ADXL345_Start>
	  sprintf(dizi,"x ekseni : %d y ekseni: %d z ekseni: %d\n ",x,y,z);
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <main+0x5c>)
 8000dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <main+0x60>)
 8000de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de4:	4619      	mov	r1, r3
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <main+0x64>)
 8000de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	460b      	mov	r3, r1
 8000df0:	490a      	ldr	r1, [pc, #40]	; (8000e1c <main+0x68>)
 8000df2:	480b      	ldr	r0, [pc, #44]	; (8000e20 <main+0x6c>)
 8000df4:	f002 fefe 	bl	8003bf4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)dizi, sizeof(dizi), HAL_MAX_DELAY);
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	22c8      	movs	r2, #200	; 0xc8
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <main+0x6c>)
 8000e00:	4808      	ldr	r0, [pc, #32]	; (8000e24 <main+0x70>)
 8000e02:	f002 fb82 	bl	800350a <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000e06:	20c8      	movs	r0, #200	; 0xc8
 8000e08:	f000 fafc 	bl	8001404 <HAL_Delay>
	  ADXL345_Start();
 8000e0c:	e7e1      	b.n	8000dd2 <main+0x1e>
 8000e0e:	bf00      	nop
 8000e10:	2000007e 	.word	0x2000007e
 8000e14:	20000080 	.word	0x20000080
 8000e18:	20000082 	.word	0x20000082
 8000e1c:	08004554 	.word	0x08004554
 8000e20:	20000128 	.word	0x20000128
 8000e24:	200000e4 	.word	0x200000e4

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b094      	sub	sp, #80	; 0x50
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	2230      	movs	r2, #48	; 0x30
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fefc 	bl	8003c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <SystemClock_Config+0xcc>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <SystemClock_Config+0xcc>)
 8000e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <SystemClock_Config+0xcc>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <SystemClock_Config+0xd0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <SystemClock_Config+0xd0>)
 8000e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <SystemClock_Config+0xd0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e90:	2302      	movs	r3, #2
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000e9c:	2332      	movs	r3, #50	; 0x32
 8000e9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea8:	f107 0320 	add.w	r3, r7, #32
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 fe47 	bl	8002b40 <HAL_RCC_OscConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000eb8:	f000 f8d8 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 f8a8 	bl	8003030 <HAL_RCC_ClockConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ee6:	f000 f8c1 	bl	800106c <Error_Handler>
  }
}
 8000eea:	bf00      	nop
 8000eec:	3750      	adds	r7, #80	; 0x50
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40007000 	.word	0x40007000

08000efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <MX_I2C1_Init+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f08:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <MX_I2C1_Init+0x58>)
 8000f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_I2C1_Init+0x50>)
 8000f3a:	f000 fd23 	bl	8001984 <HAL_I2C_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f44:	f000 f892 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000090 	.word	0x20000090
 8000f50:	40005400 	.word	0x40005400
 8000f54:	00061a80 	.word	0x00061a80

08000f58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <MX_USART2_UART_Init+0x50>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f90:	f002 fa6e 	bl	8003470 <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f9a:	f000 f867 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000e4 	.word	0x200000e4
 8000fa8:	40004400 	.word	0x40004400

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_GPIO_Init+0xb8>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a26      	ldr	r2, [pc, #152]	; (8001064 <MX_GPIO_Init+0xb8>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_GPIO_Init+0xb8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <MX_GPIO_Init+0xb8>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <MX_GPIO_Init+0xb8>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_GPIO_Init+0xb8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_GPIO_Init+0xb8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <MX_GPIO_Init+0xb8>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_GPIO_Init+0xb8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_GPIO_Init+0xb8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <MX_GPIO_Init+0xb8>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_GPIO_Init+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <MX_GPIO_Init+0xbc>)
 800103a:	f000 fc89 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800103e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_GPIO_Init+0xbc>)
 8001058:	f000 fade 	bl	8001618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020c00 	.word	0x40020c00

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010b6:	2007      	movs	r0, #7
 80010b8:	f000 fa7a 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <HAL_I2C_MspInit+0x84>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d12b      	bne.n	8001142 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_I2C_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_I2C_MspInit+0x88>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_I2C_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001106:	23c0      	movs	r3, #192	; 0xc0
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110a:	2312      	movs	r3, #18
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001116:	2304      	movs	r3, #4
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <HAL_I2C_MspInit+0x8c>)
 8001122:	f000 fa79 	bl	8001618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_I2C_MspInit+0x88>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_I2C_MspInit+0x88>)
 8001130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_I2C_MspInit+0x88>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40005400 	.word	0x40005400
 8001150:	40023800 	.word	0x40023800
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <HAL_UART_MspInit+0x84>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d12b      	bne.n	80011d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_UART_MspInit+0x88>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <HAL_UART_MspInit+0x88>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_UART_MspInit+0x88>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_UART_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_UART_MspInit+0x88>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <HAL_UART_MspInit+0x88>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011b2:	230c      	movs	r3, #12
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c2:	2307      	movs	r3, #7
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <HAL_UART_MspInit+0x8c>)
 80011ce:	f000 fa23 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40004400 	.word	0x40004400
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f8c6 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f002 fcea 	bl	8003c44 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20020000 	.word	0x20020000
 800129c:	00000400 	.word	0x00000400
 80012a0:	200001f0 	.word	0x200001f0
 80012a4:	20000340 	.word	0x20000340

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d2:	490e      	ldr	r1, [pc, #56]	; (800130c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e8:	4c0b      	ldr	r4, [pc, #44]	; (8001318 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012f6:	f7ff ffd7 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f002 fca9 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff fd59 	bl	8000db4 <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001310:	080045dc 	.word	0x080045dc
  ldr r2, =_sbss
 8001314:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001318:	20000340 	.word	0x20000340

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_Init+0x40>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_Init+0x40>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x40>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f931 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fe90 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f93b 	bl	80015fe <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f911 	bl	80015c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	200001f4 	.word	0x200001f4

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200001f4 	.word	0x200001f4

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff ff8e 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff47 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff5c 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff8e 	bl	8001504 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5d 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffb0 	bl	800156c <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	e16b      	b.n	800190c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001634:	2201      	movs	r2, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	f040 815a 	bne.w	8001906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d005      	beq.n	800166a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	2b02      	cmp	r3, #2
 8001668:	d130      	bne.n	80016cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 0201 	and.w	r2, r3, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d017      	beq.n	8001708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d123      	bne.n	800175c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80b4 	beq.w	8001906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b60      	ldr	r3, [pc, #384]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a5f      	ldr	r2, [pc, #380]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ba:	4a5b      	ldr	r2, [pc, #364]	; (8001928 <HAL_GPIO_Init+0x310>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_GPIO_Init+0x314>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d02b      	beq.n	800183e <HAL_GPIO_Init+0x226>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a51      	ldr	r2, [pc, #324]	; (8001930 <HAL_GPIO_Init+0x318>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d025      	beq.n	800183a <HAL_GPIO_Init+0x222>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_GPIO_Init+0x31c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01f      	beq.n	8001836 <HAL_GPIO_Init+0x21e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <HAL_GPIO_Init+0x320>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x21a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_GPIO_Init+0x324>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x216>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_GPIO_Init+0x328>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x212>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_GPIO_Init+0x32c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x20e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4b      	ldr	r2, [pc, #300]	; (8001948 <HAL_GPIO_Init+0x330>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x20a>
 800181e:	2307      	movs	r3, #7
 8001820:	e00e      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001822:	2308      	movs	r3, #8
 8001824:	e00c      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001826:	2306      	movs	r3, #6
 8001828:	e00a      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800182a:	2305      	movs	r3, #5
 800182c:	e008      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800182e:	2304      	movs	r3, #4
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001832:	2303      	movs	r3, #3
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800183e:	2300      	movs	r3, #0
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001850:	4935      	ldr	r1, [pc, #212]	; (8001928 <HAL_GPIO_Init+0x310>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_GPIO_Init+0x334>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001882:	4a32      	ldr	r2, [pc, #200]	; (800194c <HAL_GPIO_Init+0x334>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_GPIO_Init+0x334>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <HAL_GPIO_Init+0x334>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_GPIO_Init+0x334>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d6:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_GPIO_Init+0x334>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_GPIO_Init+0x334>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <HAL_GPIO_Init+0x334>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	f67f ae90 	bls.w	8001634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40013800 	.word	0x40013800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40021400 	.word	0x40021400
 8001944:	40021800 	.word	0x40021800
 8001948:	40021c00 	.word	0x40021c00
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e12b      	b.n	8001bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fb8c 	bl	80010c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2224      	movs	r2, #36	; 0x24
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e8:	f001 fd1a 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80019ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a81      	ldr	r2, [pc, #516]	; (8001bf8 <HAL_I2C_Init+0x274>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d807      	bhi.n	8001a08 <HAL_I2C_Init+0x84>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a80      	ldr	r2, [pc, #512]	; (8001bfc <HAL_I2C_Init+0x278>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bf94      	ite	ls
 8001a00:	2301      	movls	r3, #1
 8001a02:	2300      	movhi	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e006      	b.n	8001a16 <HAL_I2C_Init+0x92>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4a7d      	ldr	r2, [pc, #500]	; (8001c00 <HAL_I2C_Init+0x27c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	bf94      	ite	ls
 8001a10:	2301      	movls	r3, #1
 8001a12:	2300      	movhi	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0e7      	b.n	8001bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4a78      	ldr	r2, [pc, #480]	; (8001c04 <HAL_I2C_Init+0x280>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <HAL_I2C_Init+0x274>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d802      	bhi.n	8001a58 <HAL_I2C_Init+0xd4>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3301      	adds	r3, #1
 8001a56:	e009      	b.n	8001a6c <HAL_I2C_Init+0xe8>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_I2C_Init+0x284>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	495c      	ldr	r1, [pc, #368]	; (8001bf8 <HAL_I2C_Init+0x274>)
 8001a88:	428b      	cmp	r3, r1
 8001a8a:	d819      	bhi.n	8001ac0 <HAL_I2C_Init+0x13c>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1e59      	subs	r1, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9a:	1c59      	adds	r1, r3, #1
 8001a9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <HAL_I2C_Init+0x138>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1e59      	subs	r1, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aba:	e051      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001abc:	2304      	movs	r3, #4
 8001abe:	e04f      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d111      	bne.n	8001aec <HAL_I2C_Init+0x168>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e58      	subs	r0, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	440b      	add	r3, r1
 8001ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	e012      	b.n	8001b12 <HAL_I2C_Init+0x18e>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	0099      	lsls	r1, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Init+0x196>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e022      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10e      	bne.n	8001b40 <HAL_I2C_Init+0x1bc>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e58      	subs	r0, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	440b      	add	r3, r1
 8001b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3e:	e00f      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	6809      	ldr	r1, [r1, #0]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6911      	ldr	r1, [r2, #16]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68d2      	ldr	r2, [r2, #12]
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	000186a0 	.word	0x000186a0
 8001bfc:	001e847f 	.word	0x001e847f
 8001c00:	003d08ff 	.word	0x003d08ff
 8001c04:	431bde83 	.word	0x431bde83
 8001c08:	10624dd3 	.word	0x10624dd3

08001c0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	461a      	mov	r2, r3
 8001c18:	460b      	mov	r3, r1
 8001c1a:	817b      	strh	r3, [r7, #10]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff fbe4 	bl	80013ec <HAL_GetTick>
 8001c24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	f040 80e0 	bne.w	8001df4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2319      	movs	r3, #25
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4970      	ldr	r1, [pc, #448]	; (8001e00 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fda0 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e0d3      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_I2C_Master_Transmit+0x50>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e0cc      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d007      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2221      	movs	r2, #33	; 0x21
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	893a      	ldrh	r2, [r7, #8]
 8001cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4a50      	ldr	r2, [pc, #320]	; (8001e04 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cc4:	8979      	ldrh	r1, [r7, #10]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6a3a      	ldr	r2, [r7, #32]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 fbf0 	bl	80024b0 <I2C_MasterRequestWrite>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e08d      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cf0:	e066      	b.n	8001dc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	6a39      	ldr	r1, [r7, #32]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fe1a 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00d      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d107      	bne.n	8001d1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e06b      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d11b      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0x188>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d017      	beq.n	8001d94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	6a39      	ldr	r1, [r7, #32]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 fe0a 	bl	80029b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00d      	beq.n	8001dc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d107      	bne.n	8001dbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e01a      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d194      	bne.n	8001cf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	00100002 	.word	0x00100002
 8001e04:	ffff0000 	.word	0xffff0000

08001e08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	817b      	strh	r3, [r7, #10]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	813b      	strh	r3, [r7, #8]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e22:	f7ff fae3 	bl	80013ec <HAL_GetTick>
 8001e26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	f040 8208 	bne.w	8002246 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2319      	movs	r3, #25
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	497b      	ldr	r1, [pc, #492]	; (800202c <HAL_I2C_Mem_Read+0x224>)
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fc9f 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e1fb      	b.n	8002248 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Mem_Read+0x56>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e1f4      	b.n	8002248 <HAL_I2C_Mem_Read+0x440>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d007      	beq.n	8001e84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2222      	movs	r2, #34	; 0x22
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a5b      	ldr	r2, [pc, #364]	; (8002030 <HAL_I2C_Mem_Read+0x228>)
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ec6:	88f8      	ldrh	r0, [r7, #6]
 8001ec8:	893a      	ldrh	r2, [r7, #8]
 8001eca:	8979      	ldrh	r1, [r7, #10]
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fb6c 	bl	80025b4 <I2C_RequestMemoryRead>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1b0      	b.n	8002248 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d113      	bne.n	8001f16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	623b      	str	r3, [r7, #32]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	623b      	str	r3, [r7, #32]
 8001f02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e184      	b.n	8002220 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d11b      	bne.n	8001f56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e164      	b.n	8002220 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d11b      	bne.n	8001f96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	e144      	b.n	8002220 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001fac:	e138      	b.n	8002220 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	f200 80f1 	bhi.w	800219a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d123      	bne.n	8002008 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fd35 	bl	8002a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e139      	b.n	8002248 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002006:	e10b      	b.n	8002220 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	2b02      	cmp	r3, #2
 800200e:	d14e      	bne.n	80020ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	2200      	movs	r2, #0
 8002018:	4906      	ldr	r1, [pc, #24]	; (8002034 <HAL_I2C_Mem_Read+0x22c>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 fbb2 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e10e      	b.n	8002248 <HAL_I2C_Mem_Read+0x440>
 800202a:	bf00      	nop
 800202c:	00100002 	.word	0x00100002
 8002030:	ffff0000 	.word	0xffff0000
 8002034:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ac:	e0b8      	b.n	8002220 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b4:	2200      	movs	r2, #0
 80020b6:	4966      	ldr	r1, [pc, #408]	; (8002250 <HAL_I2C_Mem_Read+0x448>)
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fb63 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0bf      	b.n	8002248 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	2200      	movs	r2, #0
 8002112:	494f      	ldr	r1, [pc, #316]	; (8002250 <HAL_I2C_Mem_Read+0x448>)
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fb35 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e091      	b.n	8002248 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002198:	e042      	b.n	8002220 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fc48 	bl	8002a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e04c      	b.n	8002248 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d118      	bne.n	8002220 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	f47f aec2 	bne.w	8001fae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	00010004 	.word	0x00010004

08002254 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	460b      	mov	r3, r1
 8002262:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff f8c2 	bl	80013ec <HAL_GetTick>
 8002268:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b20      	cmp	r3, #32
 8002278:	f040 8111 	bne.w	800249e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2319      	movs	r3, #25
 8002282:	2201      	movs	r2, #1
 8002284:	4988      	ldr	r1, [pc, #544]	; (80024a8 <HAL_I2C_IsDeviceReady+0x254>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fa7c 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002292:	2302      	movs	r3, #2
 8002294:	e104      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_I2C_IsDeviceReady+0x50>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e0fd      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d007      	beq.n	80022ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2224      	movs	r2, #36	; 0x24
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a70      	ldr	r2, [pc, #448]	; (80024ac <HAL_I2C_IsDeviceReady+0x258>)
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fa3a 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002324:	d103      	bne.n	800232e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800232c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0b6      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002332:	897b      	ldrh	r3, [r7, #10]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002340:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002342:	f7ff f853 	bl	80013ec <HAL_GetTick>
 8002346:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002376:	e025      	b.n	80023c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002378:	f7ff f838 	bl	80013ec <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d302      	bcc.n	800238e <HAL_I2C_IsDeviceReady+0x13a>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	22a0      	movs	r2, #160	; 0xa0
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2ba0      	cmp	r3, #160	; 0xa0
 80023ce:	d005      	beq.n	80023dc <HAL_I2C_IsDeviceReady+0x188>
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_I2C_IsDeviceReady+0x188>
 80023d6:	7dbb      	ldrb	r3, [r7, #22]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0cd      	beq.n	8002378 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d129      	bne.n	8002446 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002400:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2319      	movs	r3, #25
 800241e:	2201      	movs	r2, #1
 8002420:	4921      	ldr	r1, [pc, #132]	; (80024a8 <HAL_I2C_IsDeviceReady+0x254>)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f9ae 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e036      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e02c      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002454:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800245e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2319      	movs	r3, #25
 8002466:	2201      	movs	r2, #1
 8002468:	490f      	ldr	r1, [pc, #60]	; (80024a8 <HAL_I2C_IsDeviceReady+0x254>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f98a 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e012      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	3301      	adds	r3, #1
 800247e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	f4ff af32 	bcc.w	80022ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800249e:	2302      	movs	r3, #2
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	00100002 	.word	0x00100002
 80024ac:	ffff0000 	.word	0xffff0000

080024b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	460b      	mov	r3, r1
 80024be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d006      	beq.n	80024da <I2C_MasterRequestWrite+0x2a>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d003      	beq.n	80024da <I2C_MasterRequestWrite+0x2a>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024d8:	d108      	bne.n	80024ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e00b      	b.n	8002504 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	2b12      	cmp	r3, #18
 80024f2:	d107      	bne.n	8002504 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f937 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252a:	d103      	bne.n	8002534 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e035      	b.n	80025a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002540:	d108      	bne.n	8002554 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002550:	611a      	str	r2, [r3, #16]
 8002552:	e01b      	b.n	800258c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002554:	897b      	ldrh	r3, [r7, #10]
 8002556:	11db      	asrs	r3, r3, #7
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 0306 	and.w	r3, r3, #6
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f063 030f 	orn	r3, r3, #15
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	490e      	ldr	r1, [pc, #56]	; (80025ac <I2C_MasterRequestWrite+0xfc>)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f95d 	bl	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e010      	b.n	80025a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002582:	897b      	ldrh	r3, [r7, #10]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4907      	ldr	r1, [pc, #28]	; (80025b0 <I2C_MasterRequestWrite+0x100>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f94d 	bl	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	00010008 	.word	0x00010008
 80025b0:	00010002 	.word	0x00010002

080025b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	4608      	mov	r0, r1
 80025be:	4611      	mov	r1, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	817b      	strh	r3, [r7, #10]
 80025c6:	460b      	mov	r3, r1
 80025c8:	813b      	strh	r3, [r7, #8]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f8c2 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00d      	beq.n	8002622 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002614:	d103      	bne.n	800261e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e0aa      	b.n	8002778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002630:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	6a3a      	ldr	r2, [r7, #32]
 8002636:	4952      	ldr	r1, [pc, #328]	; (8002780 <I2C_RequestMemoryRead+0x1cc>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f8fa 	bl	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e097      	b.n	8002778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	6a39      	ldr	r1, [r7, #32]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f964 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b04      	cmp	r3, #4
 8002674:	d107      	bne.n	8002686 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002684:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e076      	b.n	8002778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002690:	893b      	ldrh	r3, [r7, #8]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	e021      	b.n	80026e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800269c:	893b      	ldrh	r3, [r7, #8]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	6a39      	ldr	r1, [r7, #32]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f93e 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d107      	bne.n	80026d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e050      	b.n	8002778 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d6:	893b      	ldrh	r3, [r7, #8]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e2:	6a39      	ldr	r1, [r7, #32]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f923 	bl	8002930 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d107      	bne.n	8002708 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002706:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e035      	b.n	8002778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	2200      	movs	r2, #0
 8002724:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f82b 	bl	8002784 <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00d      	beq.n	8002750 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002742:	d103      	bne.n	800274c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e013      	b.n	8002778 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002750:	897b      	ldrh	r3, [r7, #10]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	6a3a      	ldr	r2, [r7, #32]
 8002764:	4906      	ldr	r1, [pc, #24]	; (8002780 <I2C_RequestMemoryRead+0x1cc>)
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f863 	bl	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	00010002 	.word	0x00010002

08002784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002794:	e025      	b.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279c:	d021      	beq.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7fe fe25 	bl	80013ec <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d116      	bne.n	80027e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f043 0220 	orr.w	r2, r3, #32
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e023      	b.n	800282a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10d      	bne.n	8002808 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4013      	ands	r3, r2
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf0c      	ite	eq
 80027fe:	2301      	moveq	r3, #1
 8002800:	2300      	movne	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	e00c      	b.n	8002822 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4013      	ands	r3, r2
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf0c      	ite	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	2300      	movne	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	429a      	cmp	r2, r3
 8002826:	d0b6      	beq.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002840:	e051      	b.n	80028e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002850:	d123      	bne.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002860:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800286a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f043 0204 	orr.w	r2, r3, #4
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e046      	b.n	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d021      	beq.n	80028e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a2:	f7fe fda3 	bl	80013ec <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d302      	bcc.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d116      	bne.n	80028e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f043 0220 	orr.w	r2, r3, #32
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e020      	b.n	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d10c      	bne.n	800290a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4013      	ands	r3, r2
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	e00b      	b.n	8002922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	43da      	mvns	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4013      	ands	r3, r2
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d18d      	bne.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293c:	e02d      	b.n	800299a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f8ce 	bl	8002ae0 <I2C_IsAcknowledgeFailed>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e02d      	b.n	80029aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d021      	beq.n	800299a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe fd49 	bl	80013ec <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d116      	bne.n	800299a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f043 0220 	orr.w	r2, r3, #32
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e007      	b.n	80029aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d1ca      	bne.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029be:	e02d      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f88d 	bl	8002ae0 <I2C_IsAcknowledgeFailed>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e02d      	b.n	8002a2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d6:	d021      	beq.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d8:	f7fe fd08 	bl	80013ec <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d302      	bcc.n	80029ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d116      	bne.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e007      	b.n	8002a2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d1ca      	bne.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a40:	e042      	b.n	8002ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d119      	bne.n	8002a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0210 	mvn.w	r2, #16
 8002a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e029      	b.n	8002ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a84:	f7fe fcb2 	bl	80013ec <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d302      	bcc.n	8002a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d116      	bne.n	8002ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e007      	b.n	8002ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad2:	2b40      	cmp	r3, #64	; 0x40
 8002ad4:	d1b5      	bne.n	8002a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af6:	d11b      	bne.n	8002b30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f043 0204 	orr.w	r2, r3, #4
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e267      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d075      	beq.n	8002c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5e:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d00c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4b85      	ldr	r3, [pc, #532]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d112      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b76:	4b82      	ldr	r3, [pc, #520]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b82:	d10b      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	4b7e      	ldr	r3, [pc, #504]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d05b      	beq.n	8002c48 <HAL_RCC_OscConfig+0x108>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d157      	bne.n	8002c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e242      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba4:	d106      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x74>
 8002ba6:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a75      	ldr	r2, [pc, #468]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e01d      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x98>
 8002bbe:	4b70      	ldr	r3, [pc, #448]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6f      	ldr	r2, [pc, #444]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6c      	ldr	r2, [pc, #432]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	4b69      	ldr	r3, [pc, #420]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a68      	ldr	r2, [pc, #416]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a65      	ldr	r2, [pc, #404]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fbf8 	bl	80013ec <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c00:	f7fe fbf4 	bl	80013ec <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	; 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e207      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b5b      	ldr	r3, [pc, #364]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0xc0>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fbe4 	bl	80013ec <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7fe fbe0 	bl	80013ec <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1f3      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	4b51      	ldr	r3, [pc, #324]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0xe8>
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d063      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c56:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d11c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6e:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d116      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_RCC_OscConfig+0x152>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1c7      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4937      	ldr	r1, [pc, #220]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	e03a      	b.n	8002d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fb99 	bl	80013ec <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fb95 	bl	80013ec <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1a8      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cdc:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4925      	ldr	r1, [pc, #148]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fb78 	bl	80013ec <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d00:	f7fe fb74 	bl	80013ec <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e187      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d036      	beq.n	8002d98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <HAL_RCC_OscConfig+0x248>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fb58 	bl	80013ec <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fe fb54 	bl	80013ec <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e167      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x200>
 8002d5e:	e01b      	b.n	8002d98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_OscConfig+0x248>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7fe fb41 	bl	80013ec <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	e00e      	b.n	8002d8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6e:	f7fe fb3d 	bl	80013ec <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d907      	bls.n	8002d8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e150      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	42470000 	.word	0x42470000
 8002d88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8c:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ea      	bne.n	8002d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8097 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002daa:	4b81      	ldr	r3, [pc, #516]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	4b7d      	ldr	r3, [pc, #500]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a7c      	ldr	r2, [pc, #496]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b7a      	ldr	r3, [pc, #488]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b77      	ldr	r3, [pc, #476]	; (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4b74      	ldr	r3, [pc, #464]	; (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a73      	ldr	r2, [pc, #460]	; (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7fe fafd 	bl	80013ec <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fe faf9 	bl	80013ec <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e10c      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2ea>
 8002e1c:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a63      	ldr	r2, [pc, #396]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	e01c      	b.n	8002e64 <HAL_RCC_OscConfig+0x324>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x30c>
 8002e32:	4b5f      	ldr	r3, [pc, #380]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a5e      	ldr	r2, [pc, #376]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	4b5c      	ldr	r3, [pc, #368]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a5b      	ldr	r2, [pc, #364]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	e00b      	b.n	8002e64 <HAL_RCC_OscConfig+0x324>
 8002e4c:	4b58      	ldr	r3, [pc, #352]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a57      	ldr	r2, [pc, #348]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	4b55      	ldr	r3, [pc, #340]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a54      	ldr	r2, [pc, #336]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	f023 0304 	bic.w	r3, r3, #4
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7fe fabe 	bl	80013ec <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e74:	f7fe faba 	bl	80013ec <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0cb      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ee      	beq.n	8002e74 <HAL_RCC_OscConfig+0x334>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fe faa8 	bl	80013ec <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe faa4 	bl	80013ec <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0b5      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb6:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	4a38      	ldr	r2, [pc, #224]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a1 	beq.w	8003020 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ede:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d05c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d141      	bne.n	8002f76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef2:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_RCC_OscConfig+0x478>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fa78 	bl	80013ec <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe fa74 	bl	80013ec <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e087      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	3b01      	subs	r3, #1
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	491b      	ldr	r1, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_OscConfig+0x478>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fa4d 	bl	80013ec <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fe fa49 	bl	80013ec <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e05c      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x416>
 8002f74:	e054      	b.n	8003020 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_RCC_OscConfig+0x478>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fa36 	bl	80013ec <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe fa32 	bl	80013ec <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e045      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x444>
 8002fa2:	e03d      	b.n	8003020 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e038      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x4ec>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d028      	beq.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d121      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11a      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0cc      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b68      	ldr	r3, [pc, #416]	; (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d90c      	bls.n	800306c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b65      	ldr	r3, [pc, #404]	; (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b63      	ldr	r3, [pc, #396]	; (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0b8      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d020      	beq.n	80030ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003084:	4b59      	ldr	r3, [pc, #356]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a58      	ldr	r2, [pc, #352]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800308e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800309c:	4b53      	ldr	r3, [pc, #332]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a52      	ldr	r2, [pc, #328]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a8:	4b50      	ldr	r3, [pc, #320]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	494d      	ldr	r1, [pc, #308]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d044      	beq.n	8003150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d119      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e07f      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06f      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	4b3b      	ldr	r3, [pc, #236]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e067      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310e:	4b37      	ldr	r3, [pc, #220]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f023 0203 	bic.w	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4934      	ldr	r1, [pc, #208]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003120:	f7fe f964 	bl	80013ec <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	e00a      	b.n	800313e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003128:	f7fe f960 	bl	80013ec <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e04f      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 020c 	and.w	r2, r3, #12
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1eb      	bne.n	8003128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d20c      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e032      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003184:	4b19      	ldr	r3, [pc, #100]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4916      	ldr	r1, [pc, #88]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	490e      	ldr	r1, [pc, #56]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031b6:	f000 f821 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	490a      	ldr	r1, [pc, #40]	; (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	5ccb      	ldrb	r3, [r1, r3]
 80031ca:	fa22 f303 	lsr.w	r3, r2, r3
 80031ce:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe f8c4 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023c00 	.word	0x40023c00
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08004580 	.word	0x08004580
 80031f4:	20000000 	.word	0x20000000
 80031f8:	20000004 	.word	0x20000004

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003200:	b094      	sub	sp, #80	; 0x50
 8003202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	647b      	str	r3, [r7, #68]	; 0x44
 8003208:	2300      	movs	r3, #0
 800320a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800320c:	2300      	movs	r3, #0
 800320e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003214:	4b79      	ldr	r3, [pc, #484]	; (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d00d      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x40>
 8003220:	2b08      	cmp	r3, #8
 8003222:	f200 80e1 	bhi.w	80033e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x34>
 800322a:	2b04      	cmp	r3, #4
 800322c:	d003      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0x3a>
 800322e:	e0db      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b73      	ldr	r3, [pc, #460]	; (8003400 <HAL_RCC_GetSysClockFreq+0x204>)
 8003232:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003234:	e0db      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003236:	4b73      	ldr	r3, [pc, #460]	; (8003404 <HAL_RCC_GetSysClockFreq+0x208>)
 8003238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800323a:	e0d8      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800323c:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003244:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003246:	4b6d      	ldr	r3, [pc, #436]	; (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d063      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003252:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	2200      	movs	r2, #0
 800325a:	63bb      	str	r3, [r7, #56]	; 0x38
 800325c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
 8003266:	2300      	movs	r3, #0
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
 800326a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800326e:	4622      	mov	r2, r4
 8003270:	462b      	mov	r3, r5
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	0159      	lsls	r1, r3, #5
 800327c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003280:	0150      	lsls	r0, r2, #5
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4621      	mov	r1, r4
 8003288:	1a51      	subs	r1, r2, r1
 800328a:	6139      	str	r1, [r7, #16]
 800328c:	4629      	mov	r1, r5
 800328e:	eb63 0301 	sbc.w	r3, r3, r1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a0:	4659      	mov	r1, fp
 80032a2:	018b      	lsls	r3, r1, #6
 80032a4:	4651      	mov	r1, sl
 80032a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032aa:	4651      	mov	r1, sl
 80032ac:	018a      	lsls	r2, r1, #6
 80032ae:	4651      	mov	r1, sl
 80032b0:	ebb2 0801 	subs.w	r8, r2, r1
 80032b4:	4659      	mov	r1, fp
 80032b6:	eb63 0901 	sbc.w	r9, r3, r1
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ce:	4690      	mov	r8, r2
 80032d0:	4699      	mov	r9, r3
 80032d2:	4623      	mov	r3, r4
 80032d4:	eb18 0303 	adds.w	r3, r8, r3
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	462b      	mov	r3, r5
 80032dc:	eb49 0303 	adc.w	r3, r9, r3
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ee:	4629      	mov	r1, r5
 80032f0:	024b      	lsls	r3, r1, #9
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032f8:	4621      	mov	r1, r4
 80032fa:	024a      	lsls	r2, r1, #9
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003302:	2200      	movs	r2, #0
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
 8003306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800330c:	f7fd fae6 	bl	80008dc <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003318:	e058      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331a:	4b38      	ldr	r3, [pc, #224]	; (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	2200      	movs	r2, #0
 8003322:	4618      	mov	r0, r3
 8003324:	4611      	mov	r1, r2
 8003326:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800332a:	623b      	str	r3, [r7, #32]
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
 8003330:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003334:	4642      	mov	r2, r8
 8003336:	464b      	mov	r3, r9
 8003338:	f04f 0000 	mov.w	r0, #0
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	0159      	lsls	r1, r3, #5
 8003342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003346:	0150      	lsls	r0, r2, #5
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4641      	mov	r1, r8
 800334e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003352:	4649      	mov	r1, r9
 8003354:	eb63 0b01 	sbc.w	fp, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003364:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003368:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800336c:	ebb2 040a 	subs.w	r4, r2, sl
 8003370:	eb63 050b 	sbc.w	r5, r3, fp
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	00eb      	lsls	r3, r5, #3
 800337e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003382:	00e2      	lsls	r2, r4, #3
 8003384:	4614      	mov	r4, r2
 8003386:	461d      	mov	r5, r3
 8003388:	4643      	mov	r3, r8
 800338a:	18e3      	adds	r3, r4, r3
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	464b      	mov	r3, r9
 8003390:	eb45 0303 	adc.w	r3, r5, r3
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a2:	4629      	mov	r1, r5
 80033a4:	028b      	lsls	r3, r1, #10
 80033a6:	4621      	mov	r1, r4
 80033a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033ac:	4621      	mov	r1, r4
 80033ae:	028a      	lsls	r2, r1, #10
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b6:	2200      	movs	r2, #0
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	61fa      	str	r2, [r7, #28]
 80033bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c0:	f7fd fa8c 	bl	80008dc <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4613      	mov	r3, r2
 80033ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	3301      	adds	r3, #1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e6:	e002      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3750      	adds	r7, #80	; 0x50
 80033f4:	46bd      	mov	sp, r7
 80033f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	00f42400 	.word	0x00f42400
 8003404:	007a1200 	.word	0x007a1200

08003408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCC_GetHCLKFreq+0x14>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000000 	.word	0x20000000

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003424:	f7ff fff0 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0a9b      	lsrs	r3, r3, #10
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40023800 	.word	0x40023800
 8003444:	08004590 	.word	0x08004590

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800344c:	f7ff ffdc 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0b5b      	lsrs	r3, r3, #13
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	; (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	08004590 	.word	0x08004590

08003470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e03f      	b.n	8003502 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd fe5e 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2224      	movs	r2, #36	; 0x24
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f929 	bl	800370c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b08a      	sub	sp, #40	; 0x28
 800350e:	af02      	add	r7, sp, #8
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b20      	cmp	r3, #32
 8003528:	d17c      	bne.n	8003624 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_UART_Transmit+0x2c>
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e075      	b.n	8003626 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_UART_Transmit+0x3e>
 8003544:	2302      	movs	r3, #2
 8003546:	e06e      	b.n	8003626 <HAL_UART_Transmit+0x11c>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2221      	movs	r2, #33	; 0x21
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800355e:	f7fd ff45 	bl	80013ec <HAL_GetTick>
 8003562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	88fa      	ldrh	r2, [r7, #6]
 8003568:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003578:	d108      	bne.n	800358c <HAL_UART_Transmit+0x82>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	e003      	b.n	8003594 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800359c:	e02a      	b.n	80035f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2200      	movs	r2, #0
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f840 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e036      	b.n	8003626 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	3302      	adds	r3, #2
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	e007      	b.n	80035e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	781a      	ldrb	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	3301      	adds	r3, #1
 80035e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1cf      	bne.n	800359e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	2140      	movs	r1, #64	; 0x40
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f810 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e006      	b.n	8003626 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b090      	sub	sp, #64	; 0x40
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363e:	e050      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d04c      	beq.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0x30>
 800364e:	f7fd fecd 	bl	80013ec <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800365a:	429a      	cmp	r2, r3
 800365c:	d241      	bcs.n	80036e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800367e:	637a      	str	r2, [r7, #52]	; 0x34
 8003680:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e5      	bne.n	800365e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3314      	adds	r3, #20
 8003698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	613b      	str	r3, [r7, #16]
   return(result);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3314      	adds	r3, #20
 80036b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b2:	623a      	str	r2, [r7, #32]
 80036b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	69f9      	ldr	r1, [r7, #28]
 80036b8:	6a3a      	ldr	r2, [r7, #32]
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	61bb      	str	r3, [r7, #24]
   return(result);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e5      	bne.n	8003692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e00f      	b.n	8003702 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d09f      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3740      	adds	r7, #64	; 0x40
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b0c0      	sub	sp, #256	; 0x100
 8003712:	af00      	add	r7, sp, #0
 8003714:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	68d9      	ldr	r1, [r3, #12]
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	ea40 0301 	orr.w	r3, r0, r1
 8003734:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	431a      	orrs	r2, r3
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003764:	f021 010c 	bic.w	r1, r1, #12
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003772:	430b      	orrs	r3, r1
 8003774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003786:	6999      	ldr	r1, [r3, #24]
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	ea40 0301 	orr.w	r3, r0, r1
 8003792:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b8f      	ldr	r3, [pc, #572]	; (80039d8 <UART_SetConfig+0x2cc>)
 800379c:	429a      	cmp	r2, r3
 800379e:	d005      	beq.n	80037ac <UART_SetConfig+0xa0>
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b8d      	ldr	r3, [pc, #564]	; (80039dc <UART_SetConfig+0x2d0>)
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d104      	bne.n	80037b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7ff fe4c 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 80037b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037b4:	e003      	b.n	80037be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037b6:	f7ff fe33 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80037ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c8:	f040 810c 	bne.w	80039e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037de:	4622      	mov	r2, r4
 80037e0:	462b      	mov	r3, r5
 80037e2:	1891      	adds	r1, r2, r2
 80037e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037e6:	415b      	adcs	r3, r3
 80037e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037ee:	4621      	mov	r1, r4
 80037f0:	eb12 0801 	adds.w	r8, r2, r1
 80037f4:	4629      	mov	r1, r5
 80037f6:	eb43 0901 	adc.w	r9, r3, r1
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800380a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380e:	4690      	mov	r8, r2
 8003810:	4699      	mov	r9, r3
 8003812:	4623      	mov	r3, r4
 8003814:	eb18 0303 	adds.w	r3, r8, r3
 8003818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800381c:	462b      	mov	r3, r5
 800381e:	eb49 0303 	adc.w	r3, r9, r3
 8003822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003832:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003836:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800383a:	460b      	mov	r3, r1
 800383c:	18db      	adds	r3, r3, r3
 800383e:	653b      	str	r3, [r7, #80]	; 0x50
 8003840:	4613      	mov	r3, r2
 8003842:	eb42 0303 	adc.w	r3, r2, r3
 8003846:	657b      	str	r3, [r7, #84]	; 0x54
 8003848:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800384c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003850:	f7fd f844 	bl	80008dc <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <UART_SetConfig+0x2d4>)
 800385a:	fba3 2302 	umull	r2, r3, r3, r2
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	011c      	lsls	r4, r3, #4
 8003862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800386c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003870:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	1891      	adds	r1, r2, r2
 800387a:	64b9      	str	r1, [r7, #72]	; 0x48
 800387c:	415b      	adcs	r3, r3
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003880:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003884:	4641      	mov	r1, r8
 8003886:	eb12 0a01 	adds.w	sl, r2, r1
 800388a:	4649      	mov	r1, r9
 800388c:	eb43 0b01 	adc.w	fp, r3, r1
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800389c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038a4:	4692      	mov	sl, r2
 80038a6:	469b      	mov	fp, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	eb1a 0303 	adds.w	r3, sl, r3
 80038ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038b2:	464b      	mov	r3, r9
 80038b4:	eb4b 0303 	adc.w	r3, fp, r3
 80038b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038d0:	460b      	mov	r3, r1
 80038d2:	18db      	adds	r3, r3, r3
 80038d4:	643b      	str	r3, [r7, #64]	; 0x40
 80038d6:	4613      	mov	r3, r2
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	647b      	str	r3, [r7, #68]	; 0x44
 80038de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038e6:	f7fc fff9 	bl	80008dc <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <UART_SetConfig+0x2d4>)
 80038f2:	fba3 2301 	umull	r2, r3, r3, r1
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2264      	movs	r2, #100	; 0x64
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	1acb      	subs	r3, r1, r3
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <UART_SetConfig+0x2d4>)
 8003908:	fba3 2302 	umull	r2, r3, r3, r2
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003914:	441c      	add	r4, r3
 8003916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003920:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003924:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003928:	4642      	mov	r2, r8
 800392a:	464b      	mov	r3, r9
 800392c:	1891      	adds	r1, r2, r2
 800392e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003930:	415b      	adcs	r3, r3
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003934:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003938:	4641      	mov	r1, r8
 800393a:	1851      	adds	r1, r2, r1
 800393c:	6339      	str	r1, [r7, #48]	; 0x30
 800393e:	4649      	mov	r1, r9
 8003940:	414b      	adcs	r3, r1
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003950:	4659      	mov	r1, fp
 8003952:	00cb      	lsls	r3, r1, #3
 8003954:	4651      	mov	r1, sl
 8003956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800395a:	4651      	mov	r1, sl
 800395c:	00ca      	lsls	r2, r1, #3
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	4603      	mov	r3, r0
 8003964:	4642      	mov	r2, r8
 8003966:	189b      	adds	r3, r3, r2
 8003968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800396c:	464b      	mov	r3, r9
 800396e:	460a      	mov	r2, r1
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003984:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003988:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800398c:	460b      	mov	r3, r1
 800398e:	18db      	adds	r3, r3, r3
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
 8003992:	4613      	mov	r3, r2
 8003994:	eb42 0303 	adc.w	r3, r2, r3
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800399e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039a2:	f7fc ff9b 	bl	80008dc <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <UART_SetConfig+0x2d4>)
 80039ac:	fba3 1302 	umull	r1, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2164      	movs	r1, #100	; 0x64
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <UART_SetConfig+0x2d4>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 0207 	and.w	r2, r3, #7
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4422      	add	r2, r4
 80039d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039d4:	e106      	b.n	8003be4 <UART_SetConfig+0x4d8>
 80039d6:	bf00      	nop
 80039d8:	40011000 	.word	0x40011000
 80039dc:	40011400 	.word	0x40011400
 80039e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039f6:	4642      	mov	r2, r8
 80039f8:	464b      	mov	r3, r9
 80039fa:	1891      	adds	r1, r2, r2
 80039fc:	6239      	str	r1, [r7, #32]
 80039fe:	415b      	adcs	r3, r3
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
 8003a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a06:	4641      	mov	r1, r8
 8003a08:	1854      	adds	r4, r2, r1
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	eb43 0501 	adc.w	r5, r3, r1
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	00eb      	lsls	r3, r5, #3
 8003a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a1e:	00e2      	lsls	r2, r4, #3
 8003a20:	4614      	mov	r4, r2
 8003a22:	461d      	mov	r5, r3
 8003a24:	4643      	mov	r3, r8
 8003a26:	18e3      	adds	r3, r4, r3
 8003a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	eb45 0303 	adc.w	r3, r5, r3
 8003a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a52:	4629      	mov	r1, r5
 8003a54:	008b      	lsls	r3, r1, #2
 8003a56:	4621      	mov	r1, r4
 8003a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	008a      	lsls	r2, r1, #2
 8003a60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a64:	f7fc ff3a 	bl	80008dc <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4b60      	ldr	r3, [pc, #384]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	011c      	lsls	r4, r3, #4
 8003a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a88:	4642      	mov	r2, r8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	61b9      	str	r1, [r7, #24]
 8003a90:	415b      	adcs	r3, r3
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a98:	4641      	mov	r1, r8
 8003a9a:	1851      	adds	r1, r2, r1
 8003a9c:	6139      	str	r1, [r7, #16]
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	414b      	adcs	r3, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	00cb      	lsls	r3, r1, #3
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aba:	4651      	mov	r1, sl
 8003abc:	00ca      	lsls	r2, r1, #3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003acc:	464b      	mov	r3, r9
 8003ace:	460a      	mov	r2, r1
 8003ad0:	eb42 0303 	adc.w	r3, r2, r3
 8003ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ae2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003af0:	4649      	mov	r1, r9
 8003af2:	008b      	lsls	r3, r1, #2
 8003af4:	4641      	mov	r1, r8
 8003af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003afa:	4641      	mov	r1, r8
 8003afc:	008a      	lsls	r2, r1, #2
 8003afe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b02:	f7fc feeb 	bl	80008dc <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2264      	movs	r2, #100	; 0x64
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	1acb      	subs	r3, r1, r3
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	3332      	adds	r3, #50	; 0x32
 8003b20:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b2c:	441c      	add	r4, r3
 8003b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b32:	2200      	movs	r2, #0
 8003b34:	673b      	str	r3, [r7, #112]	; 0x70
 8003b36:	677a      	str	r2, [r7, #116]	; 0x74
 8003b38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	1891      	adds	r1, r2, r2
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	415b      	adcs	r3, r3
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	1851      	adds	r1, r2, r1
 8003b50:	6039      	str	r1, [r7, #0]
 8003b52:	4649      	mov	r1, r9
 8003b54:	414b      	adcs	r3, r1
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b64:	4659      	mov	r1, fp
 8003b66:	00cb      	lsls	r3, r1, #3
 8003b68:	4651      	mov	r1, sl
 8003b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6e:	4651      	mov	r1, sl
 8003b70:	00ca      	lsls	r2, r1, #3
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	4642      	mov	r2, r8
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b7e:	464b      	mov	r3, r9
 8003b80:	460a      	mov	r2, r1
 8003b82:	eb42 0303 	adc.w	r3, r2, r3
 8003b86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
 8003b92:	667a      	str	r2, [r7, #100]	; 0x64
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	008b      	lsls	r3, r1, #2
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003baa:	4641      	mov	r1, r8
 8003bac:	008a      	lsls	r2, r1, #2
 8003bae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bb2:	f7fc fe93 	bl	80008dc <__aeabi_uldivmod>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	2164      	movs	r1, #100	; 0x64
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	3332      	adds	r3, #50	; 0x32
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <UART_SetConfig+0x4e4>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4422      	add	r2, r4
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bea:	46bd      	mov	sp, r7
 8003bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf0:	51eb851f 	.word	0x51eb851f

08003bf4 <siprintf>:
 8003bf4:	b40e      	push	{r1, r2, r3}
 8003bf6:	b500      	push	{lr}
 8003bf8:	b09c      	sub	sp, #112	; 0x70
 8003bfa:	ab1d      	add	r3, sp, #116	; 0x74
 8003bfc:	9002      	str	r0, [sp, #8]
 8003bfe:	9006      	str	r0, [sp, #24]
 8003c00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c04:	4809      	ldr	r0, [pc, #36]	; (8003c2c <siprintf+0x38>)
 8003c06:	9107      	str	r1, [sp, #28]
 8003c08:	9104      	str	r1, [sp, #16]
 8003c0a:	4909      	ldr	r1, [pc, #36]	; (8003c30 <siprintf+0x3c>)
 8003c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c10:	9105      	str	r1, [sp, #20]
 8003c12:	6800      	ldr	r0, [r0, #0]
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	a902      	add	r1, sp, #8
 8003c18:	f000 f992 	bl	8003f40 <_svfiprintf_r>
 8003c1c:	9b02      	ldr	r3, [sp, #8]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	b01c      	add	sp, #112	; 0x70
 8003c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c28:	b003      	add	sp, #12
 8003c2a:	4770      	bx	lr
 8003c2c:	20000058 	.word	0x20000058
 8003c30:	ffff0208 	.word	0xffff0208

08003c34 <memset>:
 8003c34:	4402      	add	r2, r0
 8003c36:	4603      	mov	r3, r0
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <memset+0xa>
 8003c3c:	4770      	bx	lr
 8003c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c42:	e7f9      	b.n	8003c38 <memset+0x4>

08003c44 <__errno>:
 8003c44:	4b01      	ldr	r3, [pc, #4]	; (8003c4c <__errno+0x8>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000058 	.word	0x20000058

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4d0d      	ldr	r5, [pc, #52]	; (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	; (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	42a6      	cmp	r6, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4d0b      	ldr	r5, [pc, #44]	; (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	; (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 fc6a 	bl	800453c <_init>
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	42a6      	cmp	r6, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c78:	4798      	blx	r3
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c82:	4798      	blx	r3
 8003c84:	3601      	adds	r6, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	080045d4 	.word	0x080045d4
 8003c8c:	080045d4 	.word	0x080045d4
 8003c90:	080045d4 	.word	0x080045d4
 8003c94:	080045d8 	.word	0x080045d8

08003c98 <__retarget_lock_acquire_recursive>:
 8003c98:	4770      	bx	lr

08003c9a <__retarget_lock_release_recursive>:
 8003c9a:	4770      	bx	lr

08003c9c <_free_r>:
 8003c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c9e:	2900      	cmp	r1, #0
 8003ca0:	d044      	beq.n	8003d2c <_free_r+0x90>
 8003ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca6:	9001      	str	r0, [sp, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f1a1 0404 	sub.w	r4, r1, #4
 8003cae:	bfb8      	it	lt
 8003cb0:	18e4      	addlt	r4, r4, r3
 8003cb2:	f000 f8df 	bl	8003e74 <__malloc_lock>
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <_free_r+0x94>)
 8003cb8:	9801      	ldr	r0, [sp, #4]
 8003cba:	6813      	ldr	r3, [r2, #0]
 8003cbc:	b933      	cbnz	r3, 8003ccc <_free_r+0x30>
 8003cbe:	6063      	str	r3, [r4, #4]
 8003cc0:	6014      	str	r4, [r2, #0]
 8003cc2:	b003      	add	sp, #12
 8003cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cc8:	f000 b8da 	b.w	8003e80 <__malloc_unlock>
 8003ccc:	42a3      	cmp	r3, r4
 8003cce:	d908      	bls.n	8003ce2 <_free_r+0x46>
 8003cd0:	6825      	ldr	r5, [r4, #0]
 8003cd2:	1961      	adds	r1, r4, r5
 8003cd4:	428b      	cmp	r3, r1
 8003cd6:	bf01      	itttt	eq
 8003cd8:	6819      	ldreq	r1, [r3, #0]
 8003cda:	685b      	ldreq	r3, [r3, #4]
 8003cdc:	1949      	addeq	r1, r1, r5
 8003cde:	6021      	streq	r1, [r4, #0]
 8003ce0:	e7ed      	b.n	8003cbe <_free_r+0x22>
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	b10b      	cbz	r3, 8003cec <_free_r+0x50>
 8003ce8:	42a3      	cmp	r3, r4
 8003cea:	d9fa      	bls.n	8003ce2 <_free_r+0x46>
 8003cec:	6811      	ldr	r1, [r2, #0]
 8003cee:	1855      	adds	r5, r2, r1
 8003cf0:	42a5      	cmp	r5, r4
 8003cf2:	d10b      	bne.n	8003d0c <_free_r+0x70>
 8003cf4:	6824      	ldr	r4, [r4, #0]
 8003cf6:	4421      	add	r1, r4
 8003cf8:	1854      	adds	r4, r2, r1
 8003cfa:	42a3      	cmp	r3, r4
 8003cfc:	6011      	str	r1, [r2, #0]
 8003cfe:	d1e0      	bne.n	8003cc2 <_free_r+0x26>
 8003d00:	681c      	ldr	r4, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	6053      	str	r3, [r2, #4]
 8003d06:	440c      	add	r4, r1
 8003d08:	6014      	str	r4, [r2, #0]
 8003d0a:	e7da      	b.n	8003cc2 <_free_r+0x26>
 8003d0c:	d902      	bls.n	8003d14 <_free_r+0x78>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	6003      	str	r3, [r0, #0]
 8003d12:	e7d6      	b.n	8003cc2 <_free_r+0x26>
 8003d14:	6825      	ldr	r5, [r4, #0]
 8003d16:	1961      	adds	r1, r4, r5
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	bf04      	itt	eq
 8003d1c:	6819      	ldreq	r1, [r3, #0]
 8003d1e:	685b      	ldreq	r3, [r3, #4]
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	bf04      	itt	eq
 8003d24:	1949      	addeq	r1, r1, r5
 8003d26:	6021      	streq	r1, [r4, #0]
 8003d28:	6054      	str	r4, [r2, #4]
 8003d2a:	e7ca      	b.n	8003cc2 <_free_r+0x26>
 8003d2c:	b003      	add	sp, #12
 8003d2e:	bd30      	pop	{r4, r5, pc}
 8003d30:	20000338 	.word	0x20000338

08003d34 <sbrk_aligned>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4e0e      	ldr	r6, [pc, #56]	; (8003d70 <sbrk_aligned+0x3c>)
 8003d38:	460c      	mov	r4, r1
 8003d3a:	6831      	ldr	r1, [r6, #0]
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	b911      	cbnz	r1, 8003d46 <sbrk_aligned+0x12>
 8003d40:	f000 fba6 	bl	8004490 <_sbrk_r>
 8003d44:	6030      	str	r0, [r6, #0]
 8003d46:	4621      	mov	r1, r4
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 fba1 	bl	8004490 <_sbrk_r>
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	d00a      	beq.n	8003d68 <sbrk_aligned+0x34>
 8003d52:	1cc4      	adds	r4, r0, #3
 8003d54:	f024 0403 	bic.w	r4, r4, #3
 8003d58:	42a0      	cmp	r0, r4
 8003d5a:	d007      	beq.n	8003d6c <sbrk_aligned+0x38>
 8003d5c:	1a21      	subs	r1, r4, r0
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f000 fb96 	bl	8004490 <_sbrk_r>
 8003d64:	3001      	adds	r0, #1
 8003d66:	d101      	bne.n	8003d6c <sbrk_aligned+0x38>
 8003d68:	f04f 34ff 	mov.w	r4, #4294967295
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	2000033c 	.word	0x2000033c

08003d74 <_malloc_r>:
 8003d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d78:	1ccd      	adds	r5, r1, #3
 8003d7a:	f025 0503 	bic.w	r5, r5, #3
 8003d7e:	3508      	adds	r5, #8
 8003d80:	2d0c      	cmp	r5, #12
 8003d82:	bf38      	it	cc
 8003d84:	250c      	movcc	r5, #12
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	4607      	mov	r7, r0
 8003d8a:	db01      	blt.n	8003d90 <_malloc_r+0x1c>
 8003d8c:	42a9      	cmp	r1, r5
 8003d8e:	d905      	bls.n	8003d9c <_malloc_r+0x28>
 8003d90:	230c      	movs	r3, #12
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	2600      	movs	r6, #0
 8003d96:	4630      	mov	r0, r6
 8003d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e70 <_malloc_r+0xfc>
 8003da0:	f000 f868 	bl	8003e74 <__malloc_lock>
 8003da4:	f8d8 3000 	ldr.w	r3, [r8]
 8003da8:	461c      	mov	r4, r3
 8003daa:	bb5c      	cbnz	r4, 8003e04 <_malloc_r+0x90>
 8003dac:	4629      	mov	r1, r5
 8003dae:	4638      	mov	r0, r7
 8003db0:	f7ff ffc0 	bl	8003d34 <sbrk_aligned>
 8003db4:	1c43      	adds	r3, r0, #1
 8003db6:	4604      	mov	r4, r0
 8003db8:	d155      	bne.n	8003e66 <_malloc_r+0xf2>
 8003dba:	f8d8 4000 	ldr.w	r4, [r8]
 8003dbe:	4626      	mov	r6, r4
 8003dc0:	2e00      	cmp	r6, #0
 8003dc2:	d145      	bne.n	8003e50 <_malloc_r+0xdc>
 8003dc4:	2c00      	cmp	r4, #0
 8003dc6:	d048      	beq.n	8003e5a <_malloc_r+0xe6>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4638      	mov	r0, r7
 8003dce:	eb04 0903 	add.w	r9, r4, r3
 8003dd2:	f000 fb5d 	bl	8004490 <_sbrk_r>
 8003dd6:	4581      	cmp	r9, r0
 8003dd8:	d13f      	bne.n	8003e5a <_malloc_r+0xe6>
 8003dda:	6821      	ldr	r1, [r4, #0]
 8003ddc:	1a6d      	subs	r5, r5, r1
 8003dde:	4629      	mov	r1, r5
 8003de0:	4638      	mov	r0, r7
 8003de2:	f7ff ffa7 	bl	8003d34 <sbrk_aligned>
 8003de6:	3001      	adds	r0, #1
 8003de8:	d037      	beq.n	8003e5a <_malloc_r+0xe6>
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	442b      	add	r3, r5
 8003dee:	6023      	str	r3, [r4, #0]
 8003df0:	f8d8 3000 	ldr.w	r3, [r8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d038      	beq.n	8003e6a <_malloc_r+0xf6>
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	42a2      	cmp	r2, r4
 8003dfc:	d12b      	bne.n	8003e56 <_malloc_r+0xe2>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	e00f      	b.n	8003e24 <_malloc_r+0xb0>
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	1b52      	subs	r2, r2, r5
 8003e08:	d41f      	bmi.n	8003e4a <_malloc_r+0xd6>
 8003e0a:	2a0b      	cmp	r2, #11
 8003e0c:	d917      	bls.n	8003e3e <_malloc_r+0xca>
 8003e0e:	1961      	adds	r1, r4, r5
 8003e10:	42a3      	cmp	r3, r4
 8003e12:	6025      	str	r5, [r4, #0]
 8003e14:	bf18      	it	ne
 8003e16:	6059      	strne	r1, [r3, #4]
 8003e18:	6863      	ldr	r3, [r4, #4]
 8003e1a:	bf08      	it	eq
 8003e1c:	f8c8 1000 	streq.w	r1, [r8]
 8003e20:	5162      	str	r2, [r4, r5]
 8003e22:	604b      	str	r3, [r1, #4]
 8003e24:	4638      	mov	r0, r7
 8003e26:	f104 060b 	add.w	r6, r4, #11
 8003e2a:	f000 f829 	bl	8003e80 <__malloc_unlock>
 8003e2e:	f026 0607 	bic.w	r6, r6, #7
 8003e32:	1d23      	adds	r3, r4, #4
 8003e34:	1af2      	subs	r2, r6, r3
 8003e36:	d0ae      	beq.n	8003d96 <_malloc_r+0x22>
 8003e38:	1b9b      	subs	r3, r3, r6
 8003e3a:	50a3      	str	r3, [r4, r2]
 8003e3c:	e7ab      	b.n	8003d96 <_malloc_r+0x22>
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	6862      	ldr	r2, [r4, #4]
 8003e42:	d1dd      	bne.n	8003e00 <_malloc_r+0x8c>
 8003e44:	f8c8 2000 	str.w	r2, [r8]
 8003e48:	e7ec      	b.n	8003e24 <_malloc_r+0xb0>
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	6864      	ldr	r4, [r4, #4]
 8003e4e:	e7ac      	b.n	8003daa <_malloc_r+0x36>
 8003e50:	4634      	mov	r4, r6
 8003e52:	6876      	ldr	r6, [r6, #4]
 8003e54:	e7b4      	b.n	8003dc0 <_malloc_r+0x4c>
 8003e56:	4613      	mov	r3, r2
 8003e58:	e7cc      	b.n	8003df4 <_malloc_r+0x80>
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4638      	mov	r0, r7
 8003e60:	f000 f80e 	bl	8003e80 <__malloc_unlock>
 8003e64:	e797      	b.n	8003d96 <_malloc_r+0x22>
 8003e66:	6025      	str	r5, [r4, #0]
 8003e68:	e7dc      	b.n	8003e24 <_malloc_r+0xb0>
 8003e6a:	605b      	str	r3, [r3, #4]
 8003e6c:	deff      	udf	#255	; 0xff
 8003e6e:	bf00      	nop
 8003e70:	20000338 	.word	0x20000338

08003e74 <__malloc_lock>:
 8003e74:	4801      	ldr	r0, [pc, #4]	; (8003e7c <__malloc_lock+0x8>)
 8003e76:	f7ff bf0f 	b.w	8003c98 <__retarget_lock_acquire_recursive>
 8003e7a:	bf00      	nop
 8003e7c:	20000334 	.word	0x20000334

08003e80 <__malloc_unlock>:
 8003e80:	4801      	ldr	r0, [pc, #4]	; (8003e88 <__malloc_unlock+0x8>)
 8003e82:	f7ff bf0a 	b.w	8003c9a <__retarget_lock_release_recursive>
 8003e86:	bf00      	nop
 8003e88:	20000334 	.word	0x20000334

08003e8c <__ssputs_r>:
 8003e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e90:	688e      	ldr	r6, [r1, #8]
 8003e92:	461f      	mov	r7, r3
 8003e94:	42be      	cmp	r6, r7
 8003e96:	680b      	ldr	r3, [r1, #0]
 8003e98:	4682      	mov	sl, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	4690      	mov	r8, r2
 8003e9e:	d82c      	bhi.n	8003efa <__ssputs_r+0x6e>
 8003ea0:	898a      	ldrh	r2, [r1, #12]
 8003ea2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ea6:	d026      	beq.n	8003ef6 <__ssputs_r+0x6a>
 8003ea8:	6965      	ldr	r5, [r4, #20]
 8003eaa:	6909      	ldr	r1, [r1, #16]
 8003eac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eb0:	eba3 0901 	sub.w	r9, r3, r1
 8003eb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003eb8:	1c7b      	adds	r3, r7, #1
 8003eba:	444b      	add	r3, r9
 8003ebc:	106d      	asrs	r5, r5, #1
 8003ebe:	429d      	cmp	r5, r3
 8003ec0:	bf38      	it	cc
 8003ec2:	461d      	movcc	r5, r3
 8003ec4:	0553      	lsls	r3, r2, #21
 8003ec6:	d527      	bpl.n	8003f18 <__ssputs_r+0x8c>
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7ff ff53 	bl	8003d74 <_malloc_r>
 8003ece:	4606      	mov	r6, r0
 8003ed0:	b360      	cbz	r0, 8003f2c <__ssputs_r+0xa0>
 8003ed2:	6921      	ldr	r1, [r4, #16]
 8003ed4:	464a      	mov	r2, r9
 8003ed6:	f000 faeb 	bl	80044b0 <memcpy>
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee4:	81a3      	strh	r3, [r4, #12]
 8003ee6:	6126      	str	r6, [r4, #16]
 8003ee8:	6165      	str	r5, [r4, #20]
 8003eea:	444e      	add	r6, r9
 8003eec:	eba5 0509 	sub.w	r5, r5, r9
 8003ef0:	6026      	str	r6, [r4, #0]
 8003ef2:	60a5      	str	r5, [r4, #8]
 8003ef4:	463e      	mov	r6, r7
 8003ef6:	42be      	cmp	r6, r7
 8003ef8:	d900      	bls.n	8003efc <__ssputs_r+0x70>
 8003efa:	463e      	mov	r6, r7
 8003efc:	6820      	ldr	r0, [r4, #0]
 8003efe:	4632      	mov	r2, r6
 8003f00:	4641      	mov	r1, r8
 8003f02:	f000 faab 	bl	800445c <memmove>
 8003f06:	68a3      	ldr	r3, [r4, #8]
 8003f08:	1b9b      	subs	r3, r3, r6
 8003f0a:	60a3      	str	r3, [r4, #8]
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	4433      	add	r3, r6
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	2000      	movs	r0, #0
 8003f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f18:	462a      	mov	r2, r5
 8003f1a:	f000 fad7 	bl	80044cc <_realloc_r>
 8003f1e:	4606      	mov	r6, r0
 8003f20:	2800      	cmp	r0, #0
 8003f22:	d1e0      	bne.n	8003ee6 <__ssputs_r+0x5a>
 8003f24:	6921      	ldr	r1, [r4, #16]
 8003f26:	4650      	mov	r0, sl
 8003f28:	f7ff feb8 	bl	8003c9c <_free_r>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	f8ca 3000 	str.w	r3, [sl]
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f38:	81a3      	strh	r3, [r4, #12]
 8003f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3e:	e7e9      	b.n	8003f14 <__ssputs_r+0x88>

08003f40 <_svfiprintf_r>:
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f44:	4698      	mov	r8, r3
 8003f46:	898b      	ldrh	r3, [r1, #12]
 8003f48:	061b      	lsls	r3, r3, #24
 8003f4a:	b09d      	sub	sp, #116	; 0x74
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	460d      	mov	r5, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	d50e      	bpl.n	8003f72 <_svfiprintf_r+0x32>
 8003f54:	690b      	ldr	r3, [r1, #16]
 8003f56:	b963      	cbnz	r3, 8003f72 <_svfiprintf_r+0x32>
 8003f58:	2140      	movs	r1, #64	; 0x40
 8003f5a:	f7ff ff0b 	bl	8003d74 <_malloc_r>
 8003f5e:	6028      	str	r0, [r5, #0]
 8003f60:	6128      	str	r0, [r5, #16]
 8003f62:	b920      	cbnz	r0, 8003f6e <_svfiprintf_r+0x2e>
 8003f64:	230c      	movs	r3, #12
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	e0d0      	b.n	8004110 <_svfiprintf_r+0x1d0>
 8003f6e:	2340      	movs	r3, #64	; 0x40
 8003f70:	616b      	str	r3, [r5, #20]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9309      	str	r3, [sp, #36]	; 0x24
 8003f76:	2320      	movs	r3, #32
 8003f78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f80:	2330      	movs	r3, #48	; 0x30
 8003f82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004128 <_svfiprintf_r+0x1e8>
 8003f86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f8a:	f04f 0901 	mov.w	r9, #1
 8003f8e:	4623      	mov	r3, r4
 8003f90:	469a      	mov	sl, r3
 8003f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f96:	b10a      	cbz	r2, 8003f9c <_svfiprintf_r+0x5c>
 8003f98:	2a25      	cmp	r2, #37	; 0x25
 8003f9a:	d1f9      	bne.n	8003f90 <_svfiprintf_r+0x50>
 8003f9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003fa0:	d00b      	beq.n	8003fba <_svfiprintf_r+0x7a>
 8003fa2:	465b      	mov	r3, fp
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	4638      	mov	r0, r7
 8003faa:	f7ff ff6f 	bl	8003e8c <__ssputs_r>
 8003fae:	3001      	adds	r0, #1
 8003fb0:	f000 80a9 	beq.w	8004106 <_svfiprintf_r+0x1c6>
 8003fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fb6:	445a      	add	r2, fp
 8003fb8:	9209      	str	r2, [sp, #36]	; 0x24
 8003fba:	f89a 3000 	ldrb.w	r3, [sl]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80a1 	beq.w	8004106 <_svfiprintf_r+0x1c6>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fce:	f10a 0a01 	add.w	sl, sl, #1
 8003fd2:	9304      	str	r3, [sp, #16]
 8003fd4:	9307      	str	r3, [sp, #28]
 8003fd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fda:	931a      	str	r3, [sp, #104]	; 0x68
 8003fdc:	4654      	mov	r4, sl
 8003fde:	2205      	movs	r2, #5
 8003fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fe4:	4850      	ldr	r0, [pc, #320]	; (8004128 <_svfiprintf_r+0x1e8>)
 8003fe6:	f7fc f8f3 	bl	80001d0 <memchr>
 8003fea:	9a04      	ldr	r2, [sp, #16]
 8003fec:	b9d8      	cbnz	r0, 8004026 <_svfiprintf_r+0xe6>
 8003fee:	06d0      	lsls	r0, r2, #27
 8003ff0:	bf44      	itt	mi
 8003ff2:	2320      	movmi	r3, #32
 8003ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ff8:	0711      	lsls	r1, r2, #28
 8003ffa:	bf44      	itt	mi
 8003ffc:	232b      	movmi	r3, #43	; 0x2b
 8003ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004002:	f89a 3000 	ldrb.w	r3, [sl]
 8004006:	2b2a      	cmp	r3, #42	; 0x2a
 8004008:	d015      	beq.n	8004036 <_svfiprintf_r+0xf6>
 800400a:	9a07      	ldr	r2, [sp, #28]
 800400c:	4654      	mov	r4, sl
 800400e:	2000      	movs	r0, #0
 8004010:	f04f 0c0a 	mov.w	ip, #10
 8004014:	4621      	mov	r1, r4
 8004016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800401a:	3b30      	subs	r3, #48	; 0x30
 800401c:	2b09      	cmp	r3, #9
 800401e:	d94d      	bls.n	80040bc <_svfiprintf_r+0x17c>
 8004020:	b1b0      	cbz	r0, 8004050 <_svfiprintf_r+0x110>
 8004022:	9207      	str	r2, [sp, #28]
 8004024:	e014      	b.n	8004050 <_svfiprintf_r+0x110>
 8004026:	eba0 0308 	sub.w	r3, r0, r8
 800402a:	fa09 f303 	lsl.w	r3, r9, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	46a2      	mov	sl, r4
 8004034:	e7d2      	b.n	8003fdc <_svfiprintf_r+0x9c>
 8004036:	9b03      	ldr	r3, [sp, #12]
 8004038:	1d19      	adds	r1, r3, #4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	9103      	str	r1, [sp, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	bfbb      	ittet	lt
 8004042:	425b      	neglt	r3, r3
 8004044:	f042 0202 	orrlt.w	r2, r2, #2
 8004048:	9307      	strge	r3, [sp, #28]
 800404a:	9307      	strlt	r3, [sp, #28]
 800404c:	bfb8      	it	lt
 800404e:	9204      	strlt	r2, [sp, #16]
 8004050:	7823      	ldrb	r3, [r4, #0]
 8004052:	2b2e      	cmp	r3, #46	; 0x2e
 8004054:	d10c      	bne.n	8004070 <_svfiprintf_r+0x130>
 8004056:	7863      	ldrb	r3, [r4, #1]
 8004058:	2b2a      	cmp	r3, #42	; 0x2a
 800405a:	d134      	bne.n	80040c6 <_svfiprintf_r+0x186>
 800405c:	9b03      	ldr	r3, [sp, #12]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	9203      	str	r2, [sp, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	bfb8      	it	lt
 8004068:	f04f 33ff 	movlt.w	r3, #4294967295
 800406c:	3402      	adds	r4, #2
 800406e:	9305      	str	r3, [sp, #20]
 8004070:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004138 <_svfiprintf_r+0x1f8>
 8004074:	7821      	ldrb	r1, [r4, #0]
 8004076:	2203      	movs	r2, #3
 8004078:	4650      	mov	r0, sl
 800407a:	f7fc f8a9 	bl	80001d0 <memchr>
 800407e:	b138      	cbz	r0, 8004090 <_svfiprintf_r+0x150>
 8004080:	9b04      	ldr	r3, [sp, #16]
 8004082:	eba0 000a 	sub.w	r0, r0, sl
 8004086:	2240      	movs	r2, #64	; 0x40
 8004088:	4082      	lsls	r2, r0
 800408a:	4313      	orrs	r3, r2
 800408c:	3401      	adds	r4, #1
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004094:	4825      	ldr	r0, [pc, #148]	; (800412c <_svfiprintf_r+0x1ec>)
 8004096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800409a:	2206      	movs	r2, #6
 800409c:	f7fc f898 	bl	80001d0 <memchr>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d038      	beq.n	8004116 <_svfiprintf_r+0x1d6>
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <_svfiprintf_r+0x1f0>)
 80040a6:	bb1b      	cbnz	r3, 80040f0 <_svfiprintf_r+0x1b0>
 80040a8:	9b03      	ldr	r3, [sp, #12]
 80040aa:	3307      	adds	r3, #7
 80040ac:	f023 0307 	bic.w	r3, r3, #7
 80040b0:	3308      	adds	r3, #8
 80040b2:	9303      	str	r3, [sp, #12]
 80040b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b6:	4433      	add	r3, r6
 80040b8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ba:	e768      	b.n	8003f8e <_svfiprintf_r+0x4e>
 80040bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80040c0:	460c      	mov	r4, r1
 80040c2:	2001      	movs	r0, #1
 80040c4:	e7a6      	b.n	8004014 <_svfiprintf_r+0xd4>
 80040c6:	2300      	movs	r3, #0
 80040c8:	3401      	adds	r4, #1
 80040ca:	9305      	str	r3, [sp, #20]
 80040cc:	4619      	mov	r1, r3
 80040ce:	f04f 0c0a 	mov.w	ip, #10
 80040d2:	4620      	mov	r0, r4
 80040d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040d8:	3a30      	subs	r2, #48	; 0x30
 80040da:	2a09      	cmp	r2, #9
 80040dc:	d903      	bls.n	80040e6 <_svfiprintf_r+0x1a6>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0c6      	beq.n	8004070 <_svfiprintf_r+0x130>
 80040e2:	9105      	str	r1, [sp, #20]
 80040e4:	e7c4      	b.n	8004070 <_svfiprintf_r+0x130>
 80040e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ea:	4604      	mov	r4, r0
 80040ec:	2301      	movs	r3, #1
 80040ee:	e7f0      	b.n	80040d2 <_svfiprintf_r+0x192>
 80040f0:	ab03      	add	r3, sp, #12
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	462a      	mov	r2, r5
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <_svfiprintf_r+0x1f4>)
 80040f8:	a904      	add	r1, sp, #16
 80040fa:	4638      	mov	r0, r7
 80040fc:	f3af 8000 	nop.w
 8004100:	1c42      	adds	r2, r0, #1
 8004102:	4606      	mov	r6, r0
 8004104:	d1d6      	bne.n	80040b4 <_svfiprintf_r+0x174>
 8004106:	89ab      	ldrh	r3, [r5, #12]
 8004108:	065b      	lsls	r3, r3, #25
 800410a:	f53f af2d 	bmi.w	8003f68 <_svfiprintf_r+0x28>
 800410e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004110:	b01d      	add	sp, #116	; 0x74
 8004112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004116:	ab03      	add	r3, sp, #12
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	462a      	mov	r2, r5
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <_svfiprintf_r+0x1f4>)
 800411e:	a904      	add	r1, sp, #16
 8004120:	4638      	mov	r0, r7
 8004122:	f000 f879 	bl	8004218 <_printf_i>
 8004126:	e7eb      	b.n	8004100 <_svfiprintf_r+0x1c0>
 8004128:	08004598 	.word	0x08004598
 800412c:	080045a2 	.word	0x080045a2
 8004130:	00000000 	.word	0x00000000
 8004134:	08003e8d 	.word	0x08003e8d
 8004138:	0800459e 	.word	0x0800459e

0800413c <_printf_common>:
 800413c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004140:	4616      	mov	r6, r2
 8004142:	4699      	mov	r9, r3
 8004144:	688a      	ldr	r2, [r1, #8]
 8004146:	690b      	ldr	r3, [r1, #16]
 8004148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800414c:	4293      	cmp	r3, r2
 800414e:	bfb8      	it	lt
 8004150:	4613      	movlt	r3, r2
 8004152:	6033      	str	r3, [r6, #0]
 8004154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004158:	4607      	mov	r7, r0
 800415a:	460c      	mov	r4, r1
 800415c:	b10a      	cbz	r2, 8004162 <_printf_common+0x26>
 800415e:	3301      	adds	r3, #1
 8004160:	6033      	str	r3, [r6, #0]
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	0699      	lsls	r1, r3, #26
 8004166:	bf42      	ittt	mi
 8004168:	6833      	ldrmi	r3, [r6, #0]
 800416a:	3302      	addmi	r3, #2
 800416c:	6033      	strmi	r3, [r6, #0]
 800416e:	6825      	ldr	r5, [r4, #0]
 8004170:	f015 0506 	ands.w	r5, r5, #6
 8004174:	d106      	bne.n	8004184 <_printf_common+0x48>
 8004176:	f104 0a19 	add.w	sl, r4, #25
 800417a:	68e3      	ldr	r3, [r4, #12]
 800417c:	6832      	ldr	r2, [r6, #0]
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	42ab      	cmp	r3, r5
 8004182:	dc26      	bgt.n	80041d2 <_printf_common+0x96>
 8004184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004188:	1e13      	subs	r3, r2, #0
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	bf18      	it	ne
 800418e:	2301      	movne	r3, #1
 8004190:	0692      	lsls	r2, r2, #26
 8004192:	d42b      	bmi.n	80041ec <_printf_common+0xb0>
 8004194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004198:	4649      	mov	r1, r9
 800419a:	4638      	mov	r0, r7
 800419c:	47c0      	blx	r8
 800419e:	3001      	adds	r0, #1
 80041a0:	d01e      	beq.n	80041e0 <_printf_common+0xa4>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	6922      	ldr	r2, [r4, #16]
 80041a6:	f003 0306 	and.w	r3, r3, #6
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	bf02      	ittt	eq
 80041ae:	68e5      	ldreq	r5, [r4, #12]
 80041b0:	6833      	ldreq	r3, [r6, #0]
 80041b2:	1aed      	subeq	r5, r5, r3
 80041b4:	68a3      	ldr	r3, [r4, #8]
 80041b6:	bf0c      	ite	eq
 80041b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041bc:	2500      	movne	r5, #0
 80041be:	4293      	cmp	r3, r2
 80041c0:	bfc4      	itt	gt
 80041c2:	1a9b      	subgt	r3, r3, r2
 80041c4:	18ed      	addgt	r5, r5, r3
 80041c6:	2600      	movs	r6, #0
 80041c8:	341a      	adds	r4, #26
 80041ca:	42b5      	cmp	r5, r6
 80041cc:	d11a      	bne.n	8004204 <_printf_common+0xc8>
 80041ce:	2000      	movs	r0, #0
 80041d0:	e008      	b.n	80041e4 <_printf_common+0xa8>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4652      	mov	r2, sl
 80041d6:	4649      	mov	r1, r9
 80041d8:	4638      	mov	r0, r7
 80041da:	47c0      	blx	r8
 80041dc:	3001      	adds	r0, #1
 80041de:	d103      	bne.n	80041e8 <_printf_common+0xac>
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e8:	3501      	adds	r5, #1
 80041ea:	e7c6      	b.n	800417a <_printf_common+0x3e>
 80041ec:	18e1      	adds	r1, r4, r3
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	2030      	movs	r0, #48	; 0x30
 80041f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041f6:	4422      	add	r2, r4
 80041f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004200:	3302      	adds	r3, #2
 8004202:	e7c7      	b.n	8004194 <_printf_common+0x58>
 8004204:	2301      	movs	r3, #1
 8004206:	4622      	mov	r2, r4
 8004208:	4649      	mov	r1, r9
 800420a:	4638      	mov	r0, r7
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d0e6      	beq.n	80041e0 <_printf_common+0xa4>
 8004212:	3601      	adds	r6, #1
 8004214:	e7d9      	b.n	80041ca <_printf_common+0x8e>
	...

08004218 <_printf_i>:
 8004218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	7e0f      	ldrb	r7, [r1, #24]
 800421e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004220:	2f78      	cmp	r7, #120	; 0x78
 8004222:	4691      	mov	r9, r2
 8004224:	4680      	mov	r8, r0
 8004226:	460c      	mov	r4, r1
 8004228:	469a      	mov	sl, r3
 800422a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800422e:	d807      	bhi.n	8004240 <_printf_i+0x28>
 8004230:	2f62      	cmp	r7, #98	; 0x62
 8004232:	d80a      	bhi.n	800424a <_printf_i+0x32>
 8004234:	2f00      	cmp	r7, #0
 8004236:	f000 80d4 	beq.w	80043e2 <_printf_i+0x1ca>
 800423a:	2f58      	cmp	r7, #88	; 0x58
 800423c:	f000 80c0 	beq.w	80043c0 <_printf_i+0x1a8>
 8004240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004248:	e03a      	b.n	80042c0 <_printf_i+0xa8>
 800424a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800424e:	2b15      	cmp	r3, #21
 8004250:	d8f6      	bhi.n	8004240 <_printf_i+0x28>
 8004252:	a101      	add	r1, pc, #4	; (adr r1, 8004258 <_printf_i+0x40>)
 8004254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004258:	080042b1 	.word	0x080042b1
 800425c:	080042c5 	.word	0x080042c5
 8004260:	08004241 	.word	0x08004241
 8004264:	08004241 	.word	0x08004241
 8004268:	08004241 	.word	0x08004241
 800426c:	08004241 	.word	0x08004241
 8004270:	080042c5 	.word	0x080042c5
 8004274:	08004241 	.word	0x08004241
 8004278:	08004241 	.word	0x08004241
 800427c:	08004241 	.word	0x08004241
 8004280:	08004241 	.word	0x08004241
 8004284:	080043c9 	.word	0x080043c9
 8004288:	080042f1 	.word	0x080042f1
 800428c:	08004383 	.word	0x08004383
 8004290:	08004241 	.word	0x08004241
 8004294:	08004241 	.word	0x08004241
 8004298:	080043eb 	.word	0x080043eb
 800429c:	08004241 	.word	0x08004241
 80042a0:	080042f1 	.word	0x080042f1
 80042a4:	08004241 	.word	0x08004241
 80042a8:	08004241 	.word	0x08004241
 80042ac:	0800438b 	.word	0x0800438b
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	1d1a      	adds	r2, r3, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	602a      	str	r2, [r5, #0]
 80042b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042c0:	2301      	movs	r3, #1
 80042c2:	e09f      	b.n	8004404 <_printf_i+0x1ec>
 80042c4:	6820      	ldr	r0, [r4, #0]
 80042c6:	682b      	ldr	r3, [r5, #0]
 80042c8:	0607      	lsls	r7, r0, #24
 80042ca:	f103 0104 	add.w	r1, r3, #4
 80042ce:	6029      	str	r1, [r5, #0]
 80042d0:	d501      	bpl.n	80042d6 <_printf_i+0xbe>
 80042d2:	681e      	ldr	r6, [r3, #0]
 80042d4:	e003      	b.n	80042de <_printf_i+0xc6>
 80042d6:	0646      	lsls	r6, r0, #25
 80042d8:	d5fb      	bpl.n	80042d2 <_printf_i+0xba>
 80042da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042de:	2e00      	cmp	r6, #0
 80042e0:	da03      	bge.n	80042ea <_printf_i+0xd2>
 80042e2:	232d      	movs	r3, #45	; 0x2d
 80042e4:	4276      	negs	r6, r6
 80042e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ea:	485a      	ldr	r0, [pc, #360]	; (8004454 <_printf_i+0x23c>)
 80042ec:	230a      	movs	r3, #10
 80042ee:	e012      	b.n	8004316 <_printf_i+0xfe>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	6820      	ldr	r0, [r4, #0]
 80042f4:	1d19      	adds	r1, r3, #4
 80042f6:	6029      	str	r1, [r5, #0]
 80042f8:	0605      	lsls	r5, r0, #24
 80042fa:	d501      	bpl.n	8004300 <_printf_i+0xe8>
 80042fc:	681e      	ldr	r6, [r3, #0]
 80042fe:	e002      	b.n	8004306 <_printf_i+0xee>
 8004300:	0641      	lsls	r1, r0, #25
 8004302:	d5fb      	bpl.n	80042fc <_printf_i+0xe4>
 8004304:	881e      	ldrh	r6, [r3, #0]
 8004306:	4853      	ldr	r0, [pc, #332]	; (8004454 <_printf_i+0x23c>)
 8004308:	2f6f      	cmp	r7, #111	; 0x6f
 800430a:	bf0c      	ite	eq
 800430c:	2308      	moveq	r3, #8
 800430e:	230a      	movne	r3, #10
 8004310:	2100      	movs	r1, #0
 8004312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004316:	6865      	ldr	r5, [r4, #4]
 8004318:	60a5      	str	r5, [r4, #8]
 800431a:	2d00      	cmp	r5, #0
 800431c:	bfa2      	ittt	ge
 800431e:	6821      	ldrge	r1, [r4, #0]
 8004320:	f021 0104 	bicge.w	r1, r1, #4
 8004324:	6021      	strge	r1, [r4, #0]
 8004326:	b90e      	cbnz	r6, 800432c <_printf_i+0x114>
 8004328:	2d00      	cmp	r5, #0
 800432a:	d04b      	beq.n	80043c4 <_printf_i+0x1ac>
 800432c:	4615      	mov	r5, r2
 800432e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004332:	fb03 6711 	mls	r7, r3, r1, r6
 8004336:	5dc7      	ldrb	r7, [r0, r7]
 8004338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800433c:	4637      	mov	r7, r6
 800433e:	42bb      	cmp	r3, r7
 8004340:	460e      	mov	r6, r1
 8004342:	d9f4      	bls.n	800432e <_printf_i+0x116>
 8004344:	2b08      	cmp	r3, #8
 8004346:	d10b      	bne.n	8004360 <_printf_i+0x148>
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	07de      	lsls	r6, r3, #31
 800434c:	d508      	bpl.n	8004360 <_printf_i+0x148>
 800434e:	6923      	ldr	r3, [r4, #16]
 8004350:	6861      	ldr	r1, [r4, #4]
 8004352:	4299      	cmp	r1, r3
 8004354:	bfde      	ittt	le
 8004356:	2330      	movle	r3, #48	; 0x30
 8004358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800435c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004360:	1b52      	subs	r2, r2, r5
 8004362:	6122      	str	r2, [r4, #16]
 8004364:	f8cd a000 	str.w	sl, [sp]
 8004368:	464b      	mov	r3, r9
 800436a:	aa03      	add	r2, sp, #12
 800436c:	4621      	mov	r1, r4
 800436e:	4640      	mov	r0, r8
 8004370:	f7ff fee4 	bl	800413c <_printf_common>
 8004374:	3001      	adds	r0, #1
 8004376:	d14a      	bne.n	800440e <_printf_i+0x1f6>
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	b004      	add	sp, #16
 800437e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	f043 0320 	orr.w	r3, r3, #32
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	4833      	ldr	r0, [pc, #204]	; (8004458 <_printf_i+0x240>)
 800438c:	2778      	movs	r7, #120	; 0x78
 800438e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	6829      	ldr	r1, [r5, #0]
 8004396:	061f      	lsls	r7, r3, #24
 8004398:	f851 6b04 	ldr.w	r6, [r1], #4
 800439c:	d402      	bmi.n	80043a4 <_printf_i+0x18c>
 800439e:	065f      	lsls	r7, r3, #25
 80043a0:	bf48      	it	mi
 80043a2:	b2b6      	uxthmi	r6, r6
 80043a4:	07df      	lsls	r7, r3, #31
 80043a6:	bf48      	it	mi
 80043a8:	f043 0320 	orrmi.w	r3, r3, #32
 80043ac:	6029      	str	r1, [r5, #0]
 80043ae:	bf48      	it	mi
 80043b0:	6023      	strmi	r3, [r4, #0]
 80043b2:	b91e      	cbnz	r6, 80043bc <_printf_i+0x1a4>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	f023 0320 	bic.w	r3, r3, #32
 80043ba:	6023      	str	r3, [r4, #0]
 80043bc:	2310      	movs	r3, #16
 80043be:	e7a7      	b.n	8004310 <_printf_i+0xf8>
 80043c0:	4824      	ldr	r0, [pc, #144]	; (8004454 <_printf_i+0x23c>)
 80043c2:	e7e4      	b.n	800438e <_printf_i+0x176>
 80043c4:	4615      	mov	r5, r2
 80043c6:	e7bd      	b.n	8004344 <_printf_i+0x12c>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	6826      	ldr	r6, [r4, #0]
 80043cc:	6961      	ldr	r1, [r4, #20]
 80043ce:	1d18      	adds	r0, r3, #4
 80043d0:	6028      	str	r0, [r5, #0]
 80043d2:	0635      	lsls	r5, r6, #24
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	d501      	bpl.n	80043dc <_printf_i+0x1c4>
 80043d8:	6019      	str	r1, [r3, #0]
 80043da:	e002      	b.n	80043e2 <_printf_i+0x1ca>
 80043dc:	0670      	lsls	r0, r6, #25
 80043de:	d5fb      	bpl.n	80043d8 <_printf_i+0x1c0>
 80043e0:	8019      	strh	r1, [r3, #0]
 80043e2:	2300      	movs	r3, #0
 80043e4:	6123      	str	r3, [r4, #16]
 80043e6:	4615      	mov	r5, r2
 80043e8:	e7bc      	b.n	8004364 <_printf_i+0x14c>
 80043ea:	682b      	ldr	r3, [r5, #0]
 80043ec:	1d1a      	adds	r2, r3, #4
 80043ee:	602a      	str	r2, [r5, #0]
 80043f0:	681d      	ldr	r5, [r3, #0]
 80043f2:	6862      	ldr	r2, [r4, #4]
 80043f4:	2100      	movs	r1, #0
 80043f6:	4628      	mov	r0, r5
 80043f8:	f7fb feea 	bl	80001d0 <memchr>
 80043fc:	b108      	cbz	r0, 8004402 <_printf_i+0x1ea>
 80043fe:	1b40      	subs	r0, r0, r5
 8004400:	6060      	str	r0, [r4, #4]
 8004402:	6863      	ldr	r3, [r4, #4]
 8004404:	6123      	str	r3, [r4, #16]
 8004406:	2300      	movs	r3, #0
 8004408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800440c:	e7aa      	b.n	8004364 <_printf_i+0x14c>
 800440e:	6923      	ldr	r3, [r4, #16]
 8004410:	462a      	mov	r2, r5
 8004412:	4649      	mov	r1, r9
 8004414:	4640      	mov	r0, r8
 8004416:	47d0      	blx	sl
 8004418:	3001      	adds	r0, #1
 800441a:	d0ad      	beq.n	8004378 <_printf_i+0x160>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	079b      	lsls	r3, r3, #30
 8004420:	d413      	bmi.n	800444a <_printf_i+0x232>
 8004422:	68e0      	ldr	r0, [r4, #12]
 8004424:	9b03      	ldr	r3, [sp, #12]
 8004426:	4298      	cmp	r0, r3
 8004428:	bfb8      	it	lt
 800442a:	4618      	movlt	r0, r3
 800442c:	e7a6      	b.n	800437c <_printf_i+0x164>
 800442e:	2301      	movs	r3, #1
 8004430:	4632      	mov	r2, r6
 8004432:	4649      	mov	r1, r9
 8004434:	4640      	mov	r0, r8
 8004436:	47d0      	blx	sl
 8004438:	3001      	adds	r0, #1
 800443a:	d09d      	beq.n	8004378 <_printf_i+0x160>
 800443c:	3501      	adds	r5, #1
 800443e:	68e3      	ldr	r3, [r4, #12]
 8004440:	9903      	ldr	r1, [sp, #12]
 8004442:	1a5b      	subs	r3, r3, r1
 8004444:	42ab      	cmp	r3, r5
 8004446:	dcf2      	bgt.n	800442e <_printf_i+0x216>
 8004448:	e7eb      	b.n	8004422 <_printf_i+0x20a>
 800444a:	2500      	movs	r5, #0
 800444c:	f104 0619 	add.w	r6, r4, #25
 8004450:	e7f5      	b.n	800443e <_printf_i+0x226>
 8004452:	bf00      	nop
 8004454:	080045a9 	.word	0x080045a9
 8004458:	080045ba 	.word	0x080045ba

0800445c <memmove>:
 800445c:	4288      	cmp	r0, r1
 800445e:	b510      	push	{r4, lr}
 8004460:	eb01 0402 	add.w	r4, r1, r2
 8004464:	d902      	bls.n	800446c <memmove+0x10>
 8004466:	4284      	cmp	r4, r0
 8004468:	4623      	mov	r3, r4
 800446a:	d807      	bhi.n	800447c <memmove+0x20>
 800446c:	1e43      	subs	r3, r0, #1
 800446e:	42a1      	cmp	r1, r4
 8004470:	d008      	beq.n	8004484 <memmove+0x28>
 8004472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800447a:	e7f8      	b.n	800446e <memmove+0x12>
 800447c:	4402      	add	r2, r0
 800447e:	4601      	mov	r1, r0
 8004480:	428a      	cmp	r2, r1
 8004482:	d100      	bne.n	8004486 <memmove+0x2a>
 8004484:	bd10      	pop	{r4, pc}
 8004486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800448a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800448e:	e7f7      	b.n	8004480 <memmove+0x24>

08004490 <_sbrk_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4d06      	ldr	r5, [pc, #24]	; (80044ac <_sbrk_r+0x1c>)
 8004494:	2300      	movs	r3, #0
 8004496:	4604      	mov	r4, r0
 8004498:	4608      	mov	r0, r1
 800449a:	602b      	str	r3, [r5, #0]
 800449c:	f7fc fece 	bl	800123c <_sbrk>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d102      	bne.n	80044aa <_sbrk_r+0x1a>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	b103      	cbz	r3, 80044aa <_sbrk_r+0x1a>
 80044a8:	6023      	str	r3, [r4, #0]
 80044aa:	bd38      	pop	{r3, r4, r5, pc}
 80044ac:	20000330 	.word	0x20000330

080044b0 <memcpy>:
 80044b0:	440a      	add	r2, r1
 80044b2:	4291      	cmp	r1, r2
 80044b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b8:	d100      	bne.n	80044bc <memcpy+0xc>
 80044ba:	4770      	bx	lr
 80044bc:	b510      	push	{r4, lr}
 80044be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044c6:	4291      	cmp	r1, r2
 80044c8:	d1f9      	bne.n	80044be <memcpy+0xe>
 80044ca:	bd10      	pop	{r4, pc}

080044cc <_realloc_r>:
 80044cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d0:	4680      	mov	r8, r0
 80044d2:	4614      	mov	r4, r2
 80044d4:	460e      	mov	r6, r1
 80044d6:	b921      	cbnz	r1, 80044e2 <_realloc_r+0x16>
 80044d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044dc:	4611      	mov	r1, r2
 80044de:	f7ff bc49 	b.w	8003d74 <_malloc_r>
 80044e2:	b92a      	cbnz	r2, 80044f0 <_realloc_r+0x24>
 80044e4:	f7ff fbda 	bl	8003c9c <_free_r>
 80044e8:	4625      	mov	r5, r4
 80044ea:	4628      	mov	r0, r5
 80044ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f0:	f000 f81b 	bl	800452a <_malloc_usable_size_r>
 80044f4:	4284      	cmp	r4, r0
 80044f6:	4607      	mov	r7, r0
 80044f8:	d802      	bhi.n	8004500 <_realloc_r+0x34>
 80044fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044fe:	d812      	bhi.n	8004526 <_realloc_r+0x5a>
 8004500:	4621      	mov	r1, r4
 8004502:	4640      	mov	r0, r8
 8004504:	f7ff fc36 	bl	8003d74 <_malloc_r>
 8004508:	4605      	mov	r5, r0
 800450a:	2800      	cmp	r0, #0
 800450c:	d0ed      	beq.n	80044ea <_realloc_r+0x1e>
 800450e:	42bc      	cmp	r4, r7
 8004510:	4622      	mov	r2, r4
 8004512:	4631      	mov	r1, r6
 8004514:	bf28      	it	cs
 8004516:	463a      	movcs	r2, r7
 8004518:	f7ff ffca 	bl	80044b0 <memcpy>
 800451c:	4631      	mov	r1, r6
 800451e:	4640      	mov	r0, r8
 8004520:	f7ff fbbc 	bl	8003c9c <_free_r>
 8004524:	e7e1      	b.n	80044ea <_realloc_r+0x1e>
 8004526:	4635      	mov	r5, r6
 8004528:	e7df      	b.n	80044ea <_realloc_r+0x1e>

0800452a <_malloc_usable_size_r>:
 800452a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800452e:	1f18      	subs	r0, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	bfbc      	itt	lt
 8004534:	580b      	ldrlt	r3, [r1, r0]
 8004536:	18c0      	addlt	r0, r0, r3
 8004538:	4770      	bx	lr
	...

0800453c <_init>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr

08004548 <_fini>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr
